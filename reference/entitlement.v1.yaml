openapi: 3.0.0
info:
  title: Entitlement API
  version: '1.0'
  description: |
    This is an API provided by the Marketplace in the SEM ecosystem, and is designed to enable a marketplace to make information about products that have been selected or purchased by a school or individual to be then added automatically into the LMS of the school, as well as be used by the specific Learning Application that has been purchased to ensure that all setup and provisioning has been completed in advance of access.

    It is envisaged that the service implementing this API, also implements the generic [Events](https://stichtingsem.stoplight.io/docs/sem-technology-prototype/reference/events.v1.yaml) and [Webhooks](https://stichtingsem.stoplight.io/docs/sem-technology-prototype/reference/webhooks.v1.yaml) API to enable subscription to changes vs polling.

    Events generated by the Entitlement API are connected to state changes.

     - `mp.entitlement.active` - First created and active
     - `mp.entitlement.refunded` - Refunded
     - `mp.entitlement.updated` - Modified in any other way 
  contact:
    name: SEM
    url: 'https://stichtingsem.org/'
servers:
  - url: 'https://example.stichtingsem.org/api'
    description: entitlement
paths:
  '/entitlements/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Specific identifier of an entitlement.
    get:
      summary: Get a specific entitlement
      x-tags:
        - entitlements
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entitlement'
      operationId: get-entitlements-by-id
      description: |-
        Retrieve the full specification for an entitlement from a marketplace, always scoped per school

        This API is only implemented by the MP. LMS and LA will give an exception
      security:
        - APIKey:
            - mp.entitlements.school
  '/entitlements/school/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: School identifier.
    get:
      summary: Get all entitlements for a specific school
      x-tags:
        - entitlements
        - school
      parameters:
        - in: query
          name: status
          description: Filter by status
          schema:
            type: string
            example: active
        - in: query
          name: start
          description: 'Start point for pagination of results, defaults to 0,'
          schema:
            type: integer
          examples:
            default:
              value: 0
              summary: The start point for pagination
        - in: query
          name: limit
          description: 'Limit of number of results returned by page, defaults to 20 with max 100.'
          schema:
            type: integer
            maximum: 100
          examples:
            default:
              value: 20
              summary: The default value if none is provided
            max:
              value: 100
              summary: The largest recommended page size
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entitlements'
        '405':
          description: Method Not Allowed
      operationId: get-entitlements-school-id
      security:
        - APIKey:
            - mp.entitlements.school
      description: |-
        Retrieve all entilements for a specific school, the school will have approved the LMS and LA to have access to its Marketplace during the setup phase.

        This API has pagination, using `start` and `limit`, with an optional `status` filter.

        This API is only implemented by the MP. LMS and LA will give an exception
  /entitlements:
    post:
      summary: AcceptEntitlement
      operationId: post-entitlements
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  entitlementConfirmationId:
                    type: string
                    description: 'A confirmation Id '
                  processDate:
                    type: string
                    description: Date time of moment processing by the LA
              examples:
                example-1:
                  value:
                    confirmationId: string
        '405':
          description: Method Not Allowed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entitlements'
            examples: {}
      description: |-
        The entitlement endpoint POST request is the request to send a entitlement or update of the entitlement from the MP to the LA or LMS.
        This is a synchronious call, processing is a legal contract. A response with a processed timestamp and a confirmation id is mandatory as response.

        This endpoint is only implemented by the LA and LMS. The MP should give an exception.
      security:
        - APIKey:
            - mp.entitlements.school
  /entitlements/firstactivation:
    post:
      summary: Report activation
      operationId: post-activation
      x-tags:
        - entitlements
      responses:
        '200':
          description: OK
      description: |-
        Report first activation

        This API is only implemented by the MP. LMS and LA will give an exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
    parameters: []
components:
  schemas:
    Entitlement:
      title: Entitlement
      type: object
      description: 'The core object that expresses information about a product that a school or indivdiual has selected for use - typically via a LML, but not always.'
      x-tags:
        - entitlements
      properties:
        schemaVersion:
          type: integer
        id:
          type: string
          example: 24e39454-5360-4ba4-819f-03e59b8dd679
        contractId:
          type: string
          description: An optional unique identifier for the purchase agreement. Mandatoty within the communication between MP/SA and LA
        startDate:
          type: string
          format: date
          example: '2021-08-22'
        endDate:
          type: string
          format: date
        expirationDate:
          type: string
          description: 'Date - time Expiration date, is the date on which the product can no longer be converted to a license. The agreement to activate the product has expired. This does not say anything about being able to use the product after activation before this date.'
        product:
          $ref: '#/components/schemas/Product'
        entitlee:
          $ref: '#/components/schemas/Entitlee'
        quantity:
          type: integer
          example: 100
          format: int32
          description: ''
        status:
          type: string
          description: 'The status of the entitlement '
          enum:
            - entitled
            - provisioned
            - activated
            - cancelled
            - blocked
          default: entitled
          example: entitled
        marketplace:
          type: string
          example: 'https://iddink.nl'
          description: The marketplace that provided the entitlement.
      required:
        - id
        - startDate
        - endDate
        - product
        - entitlee
        - status
        - marketplace
    Product:
      title: Product
      type: object
      description: A product that can be accessed after being purchased or selected.
      x-tags:
        - entitlements
      properties:
        ean:
          type: string
        name:
          type: string
        defaultAccessUrl:
          type: string
          description: |
            This is the default URL to access the product - there may be more detailed structure and access points exchanged later between LA and LMS.
        provider:
          type: string
          description: 'id for a specific vendor, established (along with the vendor secret) at the point of setup.'
          example: e8346234-6bda-4c07-ab2e-a687a94430b2
      required:
        - ean
        - name
        - provider
    School:
      title: School
      type: object
      description: |-
        The school as entitlee.
        This can be in 3 forms: 
        - the school will use this entitlement for the quantitee specified. 
        - when entitlees is filled: the entitlees list specifies which students in the school are entitled
        - when subjectchoices is filled: each student who has this stubject choice is entitled to this product. The LA can make this match based on sis data
      x-tags:
        - entitlements
      properties:
        schoolId:
          type: string
          description: |
            The ID for the school
        schoolName:
          type: string
          description: The name for the school
        subjectChoices:
          type: array
          description: 'List of subject choices. when filled: each student who has this stubject choice is entitled to this product. The LA can make this match based on sis data'
          items:
            $ref: '#/components/schemas/SubjectChoice'
        entitlees:
          type: array
          description: List of students in the school who has rigth to this entitlement
          items:
            $ref: '#/components/schemas/Individual'
        quantity:
          type: integer
          example: 100
          description: 'Quantity available to the school, used if no subjectChoices selected.'
      required:
        - schoolId
        - schoolName
    Individual:
      title: Individual
      type: object
      description: Information about an individual who has an entitlement to use a specific product that they have purchased or selected.
      x-tags:
        - entitlements
      properties:
        id:
          type: string
          description: |
            A unique identifier for the purchaser.
        display_name:
          type: string
          description: The name of the person purchasing.
        email:
          type: string
          description: 'The email address of the person purchasing, used to notify the individual of fulfilment and provide access.'
        eckId:
          type: string
          description: 'If needed, the ECK-ID of the individual.'
        userId:
          type: string
          description: userid. (nledupersonrealId or nledupersonprofileId)
      required:
        - id
        - display_name
        - email
    SubjectChoice:
      title: SubjectChoice
      type: object
      description: 'A subjectChoice within a school that the entitlement is applicable to - typically a subject and level. So every student who has this subjectchoice is entitled to the products in this entitlement. Todo: what is primary key and is this matchable on SIS data?'
      x-tags:
        - entitlements
      properties:
        subjectCode:
          type: string
          description: 'Government standard subject code. bron: Ministerie van OCW, like https://zoek.officielebekendmakingen.nl/stcrt-2019-35044'
        level:
          type: string
          description: 'Official Level, followed by courseyear. example ''havo-1, vwo-2, etc.'''
        courseCode:
          type: string
          description: 'School code of the Level/couse/study. example ''Technasium'' This gives schools a way to name the course how they want it, while we still have a link with the official level'
        courseYear:
          type: integer
          description: Learning year
        quantity:
          type: integer
          example: 100
          description: Quantity selected or purchased.
        schoolSubjectCode:
          type: string
          description: 'Code that the school gives: like ''en'''
        schoolSubjectName:
          type: string
          description: 'School description of this subject, may differ from standard. like ''queens english'''
      required:
        - subjectCode
        - level
    Entitlements:
      title: Entitlements
      type: array
      items:
        $ref: '#/components/schemas/Entitlement'
      description: This is a list of entitlements that can be made available or retrieve in bulk.
      x-tags:
        - entitlements
    Entitlee:
      title: Entitlee
      x-tags:
        - entitlements
      oneOf:
        - $ref: '#/components/schemas/School'
        - $ref: '#/components/schemas/Individual'
    Activation:
      title: Activation
      type: object
      x-tags:
        - entitlements
      properties:
        entitlementId:
          type: string
        schemaVersion:
          type: integer
          description: 'schema version of this event/object. Start with 0, inclement when we have changes, so we know how to deserialise.'
        schoolId:
          type: string
        userId:
          type: string
          description: userid. (nledupersonrealId or nledupersonprofileId)
        eckId:
          type: string
        activationDate:
          type: string
          format: date
          description: ISO8601
      description: Initial activation for a student based on a entitlement
  securitySchemes:
    APIKey:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: ''
          refreshUrl: ''
          scopes: {}
x-tags:
  - name: entitlements
  - name: provider
  - name: school

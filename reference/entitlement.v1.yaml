openapi: 3.0.0
info:
  title: Entitlement API
  version: '1.3.0'
  description: |
    This is an API that handles the communication of entitlements between MP, LA and LMS.

    The Entitlements are the core of the SEM ecosystem and are created in the MP as a result of a school or an individual selecting and purchasing learning material for the students. The MP creates entitlements and sends these to the LA to make sure students have access to the material. The entitlements are also send to the LMS so the LMS can place access urls for each student on a personalized learning materials list.

    The MP is in control, the LA will report when an entitlement is activated and became a license via the usage API. Both LMS and LA can request the latest status of the entitlements by the MP. Actual usage of an entitlement can be requested via the Usage API of the LA.

    ## Events
    The Entitlement API uses Events and Confirmation messages to allow the MP to orchestrate and coordinate activities at the LA and LMS roles. All Events are send by the MP. All confirmation messages are send by the LA and/or the LMS. In the confirmation message the LMS or LA replies if a certain activity is successfully performed. More information is available in the documentation document.
    
    The following events are included in the Entitlement API:
    - `Entitlement`: send by the MP to the LMS and LA to communicate new Entitlements or changes into the state of the Entitlement to trigger specific activities by the LA or the LMS.
    - `EntitlementConfirmation`: confirmation message send by the LMS or the LA to the MP as a response to an Entitlement event.
    - `ChangeLicenseStatus`: send by the MP to the LMS and LA to communicate that the status of a specific license from a Student or Teacher is (de)blocked.
    - `ChangeLicenseStatusConfirmation`: confirmation message send by the LMS and the LA to the MP as a response to a ChangeLicenseStatus event.
    - `ActivationCodeRequest`: send by the MP to the LA to request a specified number of activation codes for a specified product.
    - `ActivationCodeConfirmation`: confirmation message send by the LA to the MP as a response to an ActivationCodeRequest.
    - `ActivationCodeRevokeRequest`: send by the MP to the LA including a request to revoke a specific activation code by the LA.
    - `ActivationCodeRevokeConfirmation`: confirmation message send by the LA to the MP as a response to an ActivationCodeRevokeRequest.

    ## Scopes
    Data from in the entitlements can be sensitive, and the APIs available to a requesting service depend on the scopes requested and approved during setup.  The following scopes exist for the Entitlements, and map to the following entities and attributes:

    - `mp.entitlement` - scope that allows MP to send Entitlements and ChangeLicenseStatus events. The same scope is used by the LA and LMS to retrieve these events and send back EntitlementConfirmation or ChangeLicenseStatusConfirmation Confirmation messages to the MP.
    - `mp.activationcode` - scope that allows MP to send ActivationCodeRequest and ActivationCodeRevokeRequest events to a LA. The same scope is used by the LA to retrieve these events and send back ActivationCodeConfirmation or ActivationCodeRevokeConfirmation Confirmation messages to the MP.
    
    ## Consent
    This API requires consent of a School for communication between the MP and the LMS.
    
    No consent is required for communication between the MP and the LA.
    
  contact:
    name: Stichting SEM
    url: 'https://stichtingsem.org/'
servers:
  - url: 'https://example.stichtingsem.org/api'
    description: entitlement
components:
  schemas:
  
    schemaVersion:
      type: string
      description: 'Schema version of this event/object using semantic versioning 2.0.0'
      default: 1.3.0
    
    EntitlementEvent:
      title: EntitlementEvent
      type: object
      x-tags:
        - Entitlement
      description: |-
        A new or updated Entitlement is send from the MP to the LA and LMS. In some cases the LA or LMS will send an EntitlementConfirmation to confirm this event.


        The Entitlement is always send as latest status. Many fields cannot be changed after initial "entitled" status. just the state can change or quantity be lowered.

        The event should always be processed once, the entitlementReferenceId is unique.
      properties:
        entitlementReferenceId:
          type: string
          format: uuid
          description: |
            Unique entitlementReferenceId for this request. This referenceId is used by the Event Mediator of the MP to match the EntitlementConfirmation conformation message(s) send by the LMS and/or the LA.
            If a party receives another event with the same entitlementReferenceId value, the receiving party should not process the event again. It should send the confirmation again.
        entitlement:
          $ref: '#/components/schemas/Entitlement'
      required:
        - entitlementReferenceId
        - entitlement
    
    EntitlementConfirmation:
      title: EntitlementConfirmation
      type: object
      x-tags:
        - Entitlement
      description: |-
        The confirmation that is send back when the MP sends an event to the LA or LMS.
        The confirmation is not always needed, only in the following situations:
        - Entitlement status is entitled and send to LA: LA will respond back with a confirmation
        - Entitlement status is provided and send to LMS: LMS will respond back with a confirmation
        - Entitlement status is cancelled and send to LA or LMS: LA and LMS will respond back with a confirmation
        - Entitlement status is blocked and send to LA or LMS: LA and LMS will respond back with a confirmation

        The entitlementReferenceId, entitlementId are echoed back to the MP, with a new entitlementReceiveId.

        Events are only handled once. If an event with a similar entitlementReferenceId is received, the processing is only done the first time. The confirmation may be send multiple times, but always with the same entitlementReceiveId. In this way the MP can validate that the response is processed only once.

        Functional status codes and messages are described in the Documentation.
      properties:
        entitlementReferenceId:
          type: string
          description: 'The entitlementReferenceId that was send by the MP as part of the Entitlement event'
        entitlementReceiveId:
          type: string
          description: 'A reference to this confirmation message send by the LA to the MP.'
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        entitlementId:
          type: string
          format: uuid
          description: 'The entitlementId which was part of the Entitlement Event send by the MP.'
        productId:
          type: string
          description: 'The productId which was part of the Entitlement Event send by the MP'
        processedTimestamp:
          type: string
          format: date-time
          description: | 
            The moment that the Entitlement event was processed by the LA or the LMS and the change became effective. As Events and confirmation messages are send asynchronous, this is not the moment the confirmation message was send by the LA or LMS to the MP.
            
            Format: Conform openapi in ZULU time as specified in RFC 3339, section 5.6
          example: "2017-07-21T17:32:28Z"
        newEntitlementStatus:
          type: string
          enum:
            - entitled
            - provisioned
            - link-ready
            - cancelled
            - blocked
          description: |-
            Confirmation of the next proposed status. 
            Example: as a reply to a provisioned status in an Entitlement Event, a LMS can reply with a link-ready status to the MP.
        newEntitlementQuantity:
          type: integer
          description: 'LA can confirm the new quantity, as provided in the Entitlement Event by the MP to the LA.'
        success:
          type: boolean
          description: |
            Boolean indicating the Entitlement event was processed successfully.
            When the LA disagrees with a certain change (example provisioned or cancelled) a false will be returned, along with a status code and a status message.
        status:
          type: integer
          description: 'See functional status codes within the Documentation.'
        statusMessage:
          type: string
          description: 'See functional status messages within the Documentation.'
      required:
        - entitlementReferenceId
        - entitlementReceiveId
        - schemaVersion
        - entitlementId
        - productId
        - processedTimestamp
        - newEntitlementStatus
        - success
        - status
    
    Entitlement:
      title: Entitlement
      type: object
      x-tags:
        - Entitlement
      description: |
        The core object that expresses information about a product that a school or individual has ordered at the MP. The Entitlement can be of different variants, implying different authorization rules for Students or Teachers to activate and use the Product. These include:
        
        | Entitlement Type | Authorization rule | `Entitlee` | Mandatory `Entitlee` fields |
        |---|---|---|---|
        | personal | A single specified Entitled (Student or Teacher) | Individual | `eckId`, `userId` or `activationCode` |
        | school | All Students from the School | School | `schoolId` and `quantity` |
        | schoolsubject | All Students following the specified SchoolSubject(s) | School | `schoolId`, `quantity` and `schoolSubjects` |
        | schoolgroup | All Students that belong to a specified Group | School | `schoolId`, `quantity` and `groups` |
        | schoolindividual | All specified Students | School | `schoolId` and `entitlees` or `activationCodes` |
        | schoolteacher | All specified Teachers | School | `schoolId` and `entitlees` or `activationCodes` |
        
      properties:
        entitlementId:
          type: string
          format: uuid
          example: 24e39454-5360-4ba4-819f-03e59b8dd679
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        contractId:
          type: string
          description: 'An optional unique identifier for a contract between LA and MP where this entitlement belongs to.'
        startDate:
          type: string
          format: date
          description: |
            Date from which the product can be activated by the Entitlee(s). The startDate marks the start of the activation period.
            
            Format: YYYY-MM-DD (according to RFC3339).
          example: '2021-08-22'
        activationUntilDate:
          type: string
          format: date
          description: |
            Date on which the product can no longer be activated by the Entitlee(s). The activationUntilDate marks the end of the activation period. This does not imply the product can not be used by Licensees who have activated the product during the activation period.
            
            Format: YYYY-MM-DD (according to RFC3339).
          example: '2022-07-31'
        minExpirationDate:
          type: string
          format: date
          description: |
            Optional default expirationDate a LMS can use to maintain access links to the Product in the Learning Material Lists of Students or Teachers. The minExpirationDate is calculated by the MP based on info from the Product retrieved from the Catalogue API.
            
            If the LMS receives an InitialActivation Event regarding this Entitlement from the LA via the Usage API. This InitialActivation Event could include an updated expirationDate. In that case this new expirationDate overwrites the minExpirationDate.
            
            Format: YYYY-MM-DD (according to RFC3339).
          example: '2022-07-31'
        endDate:
          type: string
          format: date
          description: |
            Date this Entitlement was blocked or cancelled. Mandatory field when the status changes to Cancelled or Blocked.
            
            Format: YYYY-MM-DD (according to RFC3339).
        entitlementType:
          type: string
          description: |
            The entitlement type specifies the variant of the authorization rule a LA and LMS should apply to determine the Entitlees that have the right to activate and use the Product.
          enum:
            - school
            - schoolsubject
            - schoolgroup
            - schoolindividual
            - schoolteacher
            - personal
        productId:
          type: string
          description: 'Unique identifier of a Product. The productId can be retrieved from the Catalogue API of the LA.'
        entitlee:
          $ref: '#/components/schemas/Entitlee'
        status:
          type: string
          description: 'The status of the entitlement '
          enum:
            - entitled
            - provisioned
            - link-ready
            - cancelled
            - blocked
          default: entitled
          example: entitled
      required:
        - entitlementId
        - schemaVersion
        - startDate
        - activationUntilDate
        - entitlementType
        - productId
        - entitlee
        - status
    
    Entitlee:
      title: Entitlee
      x-tags:
        - Entitlement
      oneOf:
        - $ref: '#/components/schemas/School'
        - $ref: '#/components/schemas/Individual'
    
    School:
      title: School
      type: object
      x-tags:
        - Entitlement
      description: |
        The school as Entitlee.
        This can be in 5 variants (see examples): 
        - the school will use this entitlement for the quantity specified. 
        - when schoolSubjects is filled: each Student who follows one of the schoolSubjects is entitled to the Product. The LA can make this match based on data retrieved from the SIS API.
        - when groups is filled: each Student who is part of one of the groups is entitled to the Product. The LA can make this match based on data retrieved from the SIS API.
        - when entitlees is filled: the entitlees list specifies which Students or Teachers in the school are entitled.
        - when activationCodes is filled: all individuals who enter one of the specified activationCodes are entitled to the Product. This only applies once per activationCode.
      x-examples:
        example-1:
          schoolId: '22461075-07BB-4A17-AB18-71B8455AA7A3'
          quantity: 100
        example-2:
          schoolId: '22461075-07BB-4A17-AB18-71B8455AA7A3'
          schoolSubjects:
            - schoolSubjectId: "e82d9695-5556-427b-9654-8452a4b85f36"
              quantity: 20
            - schoolSubjectId: "0b64f2e7-bb20-4fd4-a6ff-6cfc24bf195f"
              quantity: 80
          quantity: 100
        example-3:
          schoolId: '22461075-07BB-4A17-AB18-71B8455AA7A3'
          groups:
            - groupId: "e82d9695-5556-427b-9654-8452a4b85f36"
              quantity: 30
            - groupId: "0b64f2e7-bb20-4fd4-a6ff-6cfc24bf195f"
              quantity: 70
          quantity: 100
        example-4:
          schoolId: '22461075-07BB-4A17-AB18-71B8455AA7A3'
          entitlees:
            - eckId: 'https://ketenid.nl/201703/1a5c9c7203901866532c2d72ce056e1d29cacc70836fe2bc3a517f3f9a53eed3d77ef370ad6dcf80b3f34ced1c547c7d2e679e8e47002355f938213b3656b206'
        example-5:
          schoolId: '22461075-07BB-4A17-AB18-71B8455AA7A3'
          activationCodes:
            - 'XXXXX-XXXXX-XXXXX-XXXXX-XXXXX'
            - 'XXXXX-XXXXX-XXXXX-XXXXX-XXXXY'
      properties:
        schoolId:
          type: string
          description: 'digiDeliveryId of the school. The digiDeliveryId is case sensitive.'
        schoolSubjects:
          type: array
          description: | 
            List of schoolSubjects. Each Student who follows one of the schoolSubjects is entitled to the Product. The LA can make this match based on data retrieved from the SIS API.
            
            Mandatory field for entitlementType schoolSubject.
          items:
            type: object
            properties:
              schoolSubjectId:
                type: string
                description: 'Unique identifier for a schoolSubject. Value can be retrieved from the SIS API.'
              quantity:
                type: integer
                description: 'Optional quantity selected or purchased for this schoolSubject. The sum of all specified quantities for schoolSubject equals the total quantity for this Entitlement.'
            required:
              - schoolSubjectId
        groups:
          type: array
          description: | 
            List of groups. Each Student who is part of one of the groups is entitled to the Product. The LA can make this match based on data retrieved from the SIS API.
            
            Mandatory field for entitlementType schoolGroup.
          items:
            type: object
            properties:
              groupId:
                type: string
                description: 'Unique identifier for a group. Value can be retrieved from the SIS API.'
              quantity:
                type: integer
                description: 'Optional quantity selected or purchased for this group. The sum of all specified quantities for schoolSubject equals the total quantity for this Entitlement.'
            required:
              - groupId
        entitlees:
          type: array
          description: |
            List of Students or Teachers who are entitled to the Product.
            
            Either entitlees or activationCodes is mandatory for entitlementTypes SchoolIndividual and schoolTeacher.
          items:
            type: object
            description: |
              Student or Teacher who is entitled to activate and use the Product.
            properties:
              eckId:
                type: string
                description: |-
                  The ECK-ID of the Student or Teacher who is entitled to activate and use the Product.
                  (either eckId or userId is required)
              userId:
                type: array
                description: |
                  The User ID(s) of the Student or Teacher who is entitled to activate and use the Product.
                  (either eckId, userId is required)
                items:
                  type: object
                  properties:
                    userId:
                      type: string
                    userIdType:
                      type: string
                      enum:
                        - nlPersonProfileId
                        - nlPersonRealId
                        - Las-key
                        - Leerlingnummer
                        - Medewerkernummer
                  required:
                    - userId
                    - userIdType
        activationCodes:
          type: array
          description: |
            List of activationCodes which can be used to activate the Product.
            
            Either entitlees or activationCodes is mandatory for entitlementTypes SchoolIndividual and schoolTeacher.
          items:
            type: string
            description: 'Activation code as received from the LA.'
        quantity:
          type: integer
          example: 100
          description: 'Total quantity for this Entitlement.'
      required:
        - schoolId
    
    Individual:
      title: Individual
      type: object
      x-tags:
        - Entitlement
      description: 'Information about an individual who has an entitlement to use a specific product that they have purchased or selected.'
      properties:
        displayName:
          type: string
          description: 'The name of the Buyer.'
        email:
          type: string
          description: 'The email address of the Buyer.'
        eckId:
          type: string
          description: |
            The ECK iD of the Student who is entitled to activate and use the Product.
            (either eckId, userId or activatonCode is required)
        userId:
          type: array
          description: |
            The User ID(s) of the Student who is entitled to activate and use the Product.
            (either eckId, userId or activatonCode is required)
          items:
            type: object
            properties:
              userId:
                type: string
              userIdType:
                type: string
                enum:
                  - nlPersonProfileId
                  - nlPersonRealId
                  - Las-key
                  - Leerlingnummer
            required:
              - userId
              - userIdType
        activationCode:
          type: string
          description: |
            Activation code as received from the LA.
            (either eckId, userId or activatonCode is required)
    
    ChangeLicenseStatus:
      title: ChangeLicenseStatus
      type: object
      x-tags:
        - ChangeLicenseStatus
      description: |
        Event send by the MP to the LA or LMS to (de)block the access to a single License on an Entitlement for a specified Product and User. the User is specified by either the eckId or userId(s) and can be a Student or a Teacher. If the Entitlement contains a single Product, the productId matches the productId of the Entitlement. For Sets of digital Products or combi products with more than one digital (bundled) Products also a single underlying bundled Product can be (de)blocked.
      properties:
        entitlementAndLicenseReferenceId:
          type: string
          description: |
            Unique entitlementAndLicenseReferenceId for this request. This referenceId is used by the Event Mediator of the MP to match the ChangeLicenseStatusConfirmation conformation message(s) send by the LMS and/or the LA.
            If a party receives another event with the same entitlementAndLicenseReferenceId value, the receiving party should not process the event again. It should send the confirmation again.
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        entitlementId:
          type: string
          format: uuid
          description: 'The Entitlement on which the License is registered.'
        productId:
          type: string
          description: 'The Licensed (bundled) Product. If the status of a complete set of digital products is to be changed, the productId of the set should be provided.'
        eckId:
          type: string
          description: |-
            The ECK-ID of the Student or Teacher to whom the License belongs.
            (either eckId or userId is required)
        userId:
          type: array
          description: |
            The User ID(s) of the Student or Teacher to whom the License belongs.
            (either eckId, userId is required)
          items:
            type: object
            properties:
              userId:
                type: string
              userIdType:
                type: string
                enum:
                  - nlPersonProfileId
                  - nlPersonRealId
                  - Las-key
                  - Leerlingnummer
                  - Medewerkernummer
            required:
              - userId
              - userIdType
        newLicenseStatus:
          type: string
          description: 'The new status to which the License should be changed.'
          enum:
            - activated
            - blocked
      required:
        - entitlementAndLicenseeReferenceId
        - schemaVersion
        - entitlementId
        - productId
        - newLicenseStatus
    
    ChangeLicenseStatusConfirmation:
      title: ChangeLicenseStatusConfirmation
      type: object
      x-tags:
        - ChangeLicenseStatus
      description: |-
        The confirmation that is send back when the MP sends a ChangeLicenseStatus event to the LA or LMS.

        The LMS and LA will send a confirmation message back to the MP that the change is understood and processed.

        The entitlementAndLicenseeReferenceId, entitlementId, productId, eckId/userId are echoed back to the MP, with a new entitlementAndLicenseReceiveId.

        Events are only handled once. If an event with the similar entitlementAndLicenseReferenceId is received the processing is only done the first time. The confirmation may be send multiple times, but always with the same entitlementAndLicenseReceiveId. In this way the MP can validate that the response is processed only once.
        
        Functional status codes and messages are described in the Documentation.
      properties:
        entitlementAndLicenseReferenceId:
          type: string
          description: 'The entitlementAndLicenseReferenceId that was send by the MP as part of the ChangeLicenseStatus event'
        entitlementAndLicenseReceiveId:
          type: string
          description: 'A reference to this confirmation message send by the LA or LMS to the MP.'
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        entitlementId:
          type: string
          format: uuid
          description: 'The entitlementId which was part of the ChangeLicenseStatus Event send by the MP.'
        productId:
          type: string
          description: 'The productId which was part of the ChangeLicenseStatus Event send by the MP.'
        eckId:
          type: string
          description: |-
            The ECK-ID which was part of the ChangeLicenseStatus Event send by the MP.
            (either eckId or userId is required)
        userId:
          type: array
          description: |
            The User ID(s) which was part of the ChangeLicenseStatus Event send by the MP.
            (either eckId, userId is required)
          items:
            type: object
            properties:
              userId:
                type: string
              userIdType:
                type: string
                enum:
                  - nlPersonProfileId
                  - nlPersonRealId
                  - Las-key
                  - Leerlingnummer
                  - Medewerkernummer
            required:
              - userId
              - userIdType
        processedTimestamp:
          type: string
          format: date-time
          description: | 
            The moment that the ChangeLicenseStatus event was processed by the LA or the LMS and the change became effective. As Events and confirmation messages are send asynchronous, this is not the moment the confirmation message was send by the LA or LMS to the MP.
            
            Format: Conform openapi in ZULU time as specified in RFC 3339, section 5.6
          example: "2017-07-21T17:32:28Z"
        newLicenseStatus:
          type: string
          description: 'The new status to which the License is changed.'
          enum:
            - activated
            - blocked
        success:
          type: boolean
          description: |
            Boolean indicating the Entitlement event was processed successfully.
            When the LA disagrees with a certain change (example provisioned or cancelled) a false will be returned, along with a status code and a status message.
        status:
          type: integer
          description: 'See functional status codes within the Documentation.'
        statusMessage:
          type: string
          description: 'See functional status messages within the Documentation.'
      required:
        - entitlementAndLicenseReferenceId
        - entitlementAndLicenseReceiveId
        - schemaVersion
        - entitlementId
        - productId
        - processedTimestamp
        - newLicenseStatus
        - success
        - status
    
    ActivationCodeRequest:
      title: ActivationCodeRequest
      type: object
      x-tags:
        - ActivationCode
      description: |
        Event send by the MP to the LA to request a specified quantity of activation codes for a single Product. These activation codes can be sold by the MP and can be used to specify SchoolIndividual, SchoolTeacher or Personal Entitlements.
      properties:
        requestReferenceId:
          type: string
          description: |
            Unique requestReferenceId for this request. This referenceId is used by the Event Mediator of the MP to match the ActivationCodeConfirmation conformation message(s) send by the LA.
            If a party receives another event with the same requestReferenceId value, the receiving party should not process the event again. It should send the confirmation again.
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        productId:
          type: string
          description: 'The Product for which a MP requests (an) activation code(s). The productId can be retrieved from the Catalogue API from the LA.'
        quantity:
          type: integer
          example: 1
          description: 'Total requested activation codes for the Product.'
        contractId:
          type: string
          description: 'An optional unique identifier for a contract between LA and MP where this requests belongs to.'
      required:
        - requestReferenceId
        - schemaVersion
        - productId
        - quantity
    
    ActivationCodeConfirmation:
      title: ActivationCodeConfirmation
      type: object
      x-tags:
        - ActivationCode
      description: |
        The confirmation that is send back when the MP sends a ActivationCodeRequest event to the LA.

        The LA will send a confirmation message back to the MP including the requested activation codes. In case the LA cannot generate these codes a functional status code and message is replied. 

        Events are only handled ones. If an event with the similar requestReferenceId is received the processing is only done the first time. The confirmation may be send multiple times, but always with the same responseReferenceId. In this way the MP can validate that the response is processed only once.
        
        Functional status codes and messages are described in the Documentation.
      properties:
        requestReferenceId:
          type: string
          description: 'The requestReferenceId that was send by the MP as part of the ActivationCodeRequest event'
        responseReferenceId:
          type: string
          description: 'A reference to this confirmation message send by the LA to the MP.'
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        productId:
          type: string
          description: 'The productId which was part of the ActivationCodeRequest Event send by the MP. The activation codes give Students or Teachers the possibility to activate this Product.'
        activationCodes:
          type: array
          description: |
            List of activation codes which can be used to activate the Product.
          items:
            type: string
            description: 'Activation code which can be used to activate the Product'
        processedTimestamp:
          type: string
          format: date-time
          description: | 
            The moment that the activation codes were generated by the LA and the request was processed. As Events and confirmation messages are send asynchronous, this is not the moment the confirmation message was send by the LA to the MP.
            
            Format: Conform openapi in ZULU time as specified in RFC 3339, section 5.6
          example: "2017-07-21T17:32:28Z"
        success:
          type: boolean
          description: |
            Boolean indicating the ActivationCodeRequest event was processed successfully.
            When the LA disagrees with the request a false will be returned, along with a status code and a status message.
        status:
          type: integer
          description: 'See functional status codes within the Documentation.'
        statusMessage:
          type: string
          description: 'See functional status messages within the Documentation.'
      required:
        - requestReferenceId
        - responseReferenceId
        - schemaVersion
        - productId
        - processedTimestamp
        - success
        - status
    
    ActivationCodeRevokeRequest:
      title: ActivationCodeRevokeRequest
      type: object
      x-tags:
        - ActivationCode
      description: |
        Event send by the MP to the LA with a request to revoke an activation code. After the revoke, the activation code cannot be used to activate a Product.
      properties:
        requestReferenceId:
          type: string
          description: |
            Unique requestReferenceId for this request. This referenceId is used by the Event Mediator of the MP to match the ActivationCodeRevokeConfirmation conformation message(s) send by the LA.
            If a party receives another event with the same requestReferenceId value, the receiving party should not process the event again. It should send the confirmation again.
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        activationCode:
          type: string
          description: 'Activation code which should be revoked by the LA.'
        responseReferenceId:
          type: string
          description: "Optional reference to the responseReferenceID of the confirmation message in which the LA send the activation code to the MP."
      required:
        - requestReferenceId
        - schemaVersion
        - activationCode
    
    ActivationCodeRevokeConfirmation:
      title: ActivationCodeRevokeConfirmation
      type: object
      x-tags:
        - ActivationCode
      description: |
        The confirmation that is send back when the MP sends a ActivationCodeRevokeRequest event to the LA.

        The LA will send a confirmation message back to the MP including a success parameter indicating if the revoke has ben processed successfully. In case the revoke was not processed, the LA replies with a functional status code and message. 

        Events are only handled ones. If an event with the similar requestReferenceId is received the processing is only done the first time. The confirmation may be send multiple times, but always with the same responseReferenceId. In this way the MP can validate that the response is processed only once.
        
        Functional status codes and messages are described in the Documentation.
      properties:
        requestReferenceId:
          type: string
          description: 'The requestReferenceId that was send by the MP as part of the ActivationCodeRequest event'
        responseReferenceId:
          type: string
          description: 'A reference to this confirmation message send by the LA to the MP.'
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        activationCode:
          type: string
          description: 'The activation code which was part of the ActivationCodeRevokeRequest Event send by the MP.'
        processedTimestamp:
          type: string
          format: date-time
          description: | 
            The moment that the activation codes were generated by the LA and the request was processed. As Events and confirmation messages are send asynchronous, this is not the moment the confirmation message was send by the LA to the MP.
            
            Format: Conform openapi in ZULU time as specified in RFC 3339, section 5.6
          example: "2017-07-21T17:32:28Z"
        success:
          type: boolean
          description: |
            Boolean indicating the ActivationCodeRevokeRequest event was processed successfully.
            When the LA disagrees with the request a false will be returned, along with a status code and a status message.
        status:
          type: integer
          description: 'See functional status codes within the Documentation.'
        statusMessage:
          type: string
          description: 'See functional status messages within the Documentation.'
      required:
        - requestReferenceId
        - responseReferenceId
        - schemaVersion
        - activationCode
        - processedTimestamp
        - success
        - status
    
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.example.com/oauth2/token
          refreshUrl: https://api.example.com/oauth2/token
          scopes:
            mp.entitlement: 'scope needed to send and receive Entitlement and ChangeLicenseStatus Events and Confirmation messages'
            mp.activationcode: 'scope needed to send and receive ActivationCode Events and Confirmation messages.'
      description: ''

paths:
  /entitlements/{id}:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: 'Specific entitlementId of an Entitlement.'
      - schema:
          type: string
        name: schemaVersion
        in: query
        required: false
        description: 'Optional parameter to request a response in a specific schema version. If none supplied, the server will choose its default schema version. See the Events API for a call to get the default schema version.'
    get:
      summary: Get Entitlement by ID
      x-tags:
        - Entitlement
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entitlement'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized - No valid token presented
        '403':
          description: Forbidden - No consent given to access the requested resource
        '404':
          description: Not Found
      operationId: get-entitlement-by-id
      description: |-
        Retrieve an entitlement by ID. Consent is required for a LMS.
      security:
        - OAuth2:
            - mp.entitlement
  
  /entitlements/school/{id}:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: 'schoolId (digiDeliveryId, case sensitive) of the School'
      - schema:
            type: string
            example: provisioned
            enum:
              - entitled
              - provisioned
              - link-ready
              - cancelled
              - blocked
        name: status
        in: query
        description: 'Filter by status'
      - schema:
          type: integer
        name: start
        in: query
        description: 'Start point for pagination of results, defaults to 0,'
        examples:
          default:
            value: 0
            summary: The start point for pagination
      - schema:
          type: integer
          maximum: 100
        in: query
        name: limit
        description: 'Limit of number of results returned by page, defaults to 20 with max 100.'
        examples:
          default:
            value: 20
            summary: The default value if none is provided
          max:
            value: 100
            summary: The largest recommended page size
      - schema:
          type: string
        name: schemaVersion
        in: query
        required: false
        description: 'Optional parameter to request a response in a specific schema version. If none supplied, the server will choose its default schema version. See the Events API for a call to get the default schema version.'
    get:
      summary: Get All Entitlements by School ID
      x-tags:
        - Entitlement
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entitlement'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized - No valid token presented
        '403':
          description: Forbidden - No consent given to access the requested resource
        '404':
          description: Not Found
      operationId: get-all-entitlements-by-school-id
      security:
        - OAuth2:
            - mp.entitlement
      description: |-
        Retrieve all entitlements for a specific school. Consent is required for a LMS.

        This API has pagination, using `start` and `limit`, with an optional `status` filter.
        
  /entitlements:
    post:
      summary: AcceptEntitlement
      operationId: accept-entitlements
      deprecated: True
      responses:
        '200':
          description: |-
            OK, the request is processed 
            
            Functional status codes and messages are described in the Documentation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitlementConfirmation'
              examples: {}
        '400':
          description: Bad Request
        '401':
          description: Unauthorized - No valid token presented
        '403':
          description: Forbidden - No consent given to access the requested resource
        '405':
          description: Method Not Allowed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitlementEvent'
            examples: {}
      description: |-
        *NOTE:This Endpoint is defined for POC-2. It will be deprecated after that phase and the POST request is replaced by the EntitlementEvent, with corresponding EntitlementConfirmation. The name of the objects in the body and response are already name ..event.. *

         
        The entitlement endpoint POST request is the request to send an entitlement from the MP to the LA or LMS.
        This is a synchronous call, processing is a legal contract. A response with a processed timestamp and a confirmation id is mandatory as response.

        This endpoint is only implemented by the LA and LMS. The MP should give a 405 HTTP status as result when called
      security:
        - OAuth2:
            - mp.entitlement
  
  /entitlements/changelicensestatus:
    post:
      summary: ChangeLicenseStatus
      operationId: post-entitlements-changelicensestatus
      deprecated: True
      responses:
        '200':
          description: |
            OK, the request is processed.
            
            Functional status codes and messages are described in the Documentation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeLicenseStatusConfirmation'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized - No valid token presented
        '403':
          description: Forbidden - No consent given to access the requested resource
        '405':
          description: Method Not Allowed
      description: |-
        *NOTE:This Endpoint is defined for POC-2. It will be deprecated after that phase and the POST request is replaced by the ChangeLicenseStatus event, with corresponding ChangeLicenseStatusConfirmation*

        This call is used to change the status of one individual license within an entitlement. When an entitlee activates the entitlement for the first time the status for this entitlee is activated. after that moment the MP can use this call to change the status to blocked (or back to activated). 
        The LA can return several errors as result of this request. See Documentation.
        The LMS will accept any new status and use that to display or remove access links to the Product.
        
        This endpoint is only implemented by the LA and LMS. The MP should give a 405 HTTP status as result when called
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeLicenseStatus'
        description: ''
      security:
        - OAuth2:
            - mp.entitlement
    parameters: []

x-tags:
  - name: Entitlement
  - name: ChangeLicenseStatus
  - name: ActivationCode

openapi: 3.0.0
info:
  title: Entitlement API
  version: '1.0'
  description: |
    This is an API provided by the Marketplace in the SEM ecosystem, and is designed to enable a marketplace to make information about products that have been selected or purchased by a school or individual to be then added automatically into the LMS of the school, as well as be used by the specific Learning Application that has been purchased to ensure that all setup and provisioning has been completed in advance of access.

    It is envisaged that the service implementing this API, also implements the generic [Events](https://stichtingsem.stoplight.io/docs/sem-technology-prototype/reference/events.v1.yaml) and [Webhooks](https://stichtingsem.stoplight.io/docs/sem-technology-prototype/reference/webhooks.v1.yaml) API to enable subscription to changes vs polling.

    ## Events
    The Entitlements APi will not use theevent mechanisme. The requests need to be handled synchroniously, so the requesting party known that the entitlements and changes to the entitlements are checked and processed immediatelly.

    ## Scopes
     
    Data from in the entitlements can be sensitive, and the APIs available to a requesting service depend on the scopes requested and approved during setup.  The following scopes exist for the Entitlements, and map to the following entities and attributes:

    `mp.entitlement` - scope that allows MP to send entitlements and updates, allows LA,LMS to retrieve entitlements
    `la.entitlement.activation` - scope that allows a LA to send first activation
  contact:
    name: Stichting SEM
    url: 'https://stichtingsem.org/'
    email: mcginkel@gmail.com
servers:
  - url: 'https://example.stichtingsem.org/api'
    description: entitlement
paths:
  '/entitlements/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Specific identifier of an entitlement.
    get:
      summary: Get a specific entitlement
      x-tags:
        - entitlements
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entitlement'
      operationId: get-entitlements-by-id
      description: |-
        Retrieve the full specification for an entitlement from a marketplace, always scoped per school

        This API is only implemented by the MP. LMS and LA will give an exception
      security:
        - APIKey:
            - mp.entitlement
  '/entitlements/school/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: School identifier.
    get:
      summary: Get all entitlements for a specific school
      x-tags:
        - entitlements
        - school
      parameters:
        - in: query
          name: status
          description: Filter by status
          schema:
            type: string
            example: active
        - in: query
          name: start
          description: 'Start point for pagination of results, defaults to 0,'
          schema:
            type: integer
          examples:
            default:
              value: 0
              summary: The start point for pagination
        - in: query
          name: limit
          description: 'Limit of number of results returned by page, defaults to 20 with max 100.'
          schema:
            type: integer
            maximum: 100
          examples:
            default:
              value: 20
              summary: The default value if none is provided
            max:
              value: 100
              summary: The largest recommended page size
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entitlements'
        '405':
          description: Method Not Allowed
      operationId: get-entitlements-school-id
      security:
        - APIKey:
            - mp.entitlement
      description: |-
        Retrieve all entilements for a specific school, the school will have approved the LMS and LA to have access to its Marketplace during the setup phase.

        This API has pagination, using `start` and `limit`, with an optional `status` filter.

        This API is only implemented by the MP. LMS and LA will give an exception
  /entitlements:
    post:
      summary: AcceptEntitlement
      operationId: post-entitlements
      responses:
        '200':
          description: |-
            OK, the request is processed 

            status - Message
            0 - All fine
            1 - Entitlement already exists
            x - <to be defined>
            x - <to be defined>

            99- Other, see statusMessage for details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 'Result status (0=OK, see list with Errors)'
                  statusMessage:
                    type: string
                  entitlementConfirmationId:
                    type: string
                    description: 'A confirmation Id '
                  processDate:
                    type: string
                    description: Date time of moment processing by the LA
                    format: date-time
              examples:
                example-1:
                  value:
                    confirmationId: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entitlements'
            examples: {}
      description: |-
        The entitlement endpoint POST request is the request to send a entitlement or update of the entitlement from the MP to the LA or LMS.
        This is a synchronious call, processing is a legal contract. A response with a processed timestamp and a confirmation id is mandatory as response.

        This endpoint is only implemented by the LA and LMS. The MP should give an exception.
      security:
        - APIKey:
            - mp.entitlement
  /entitlements/firstactivation:
    post:
      summary: Report activation
      operationId: post-activation
      x-tags:
        - entitlements
      responses:
        '200':
          description: |
            OK, the request is processed.

            status - Message
            0 - All fine
            1 - Entilement not found for this school
            2 - Entitlement not in right state for this action
            3 - This UserId is unknown
            4 - This EckId is unknown
            5 - This user is not entitled to the entitlement. Activation refused
            6 - activationDate is not a valid date
            7 - activationDate is not within the allowed timeframe.
            99- Other, see statusMessage for details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 'Result status (0=OK, see list with Errors)'
                  statusMessage:
                    type: string
                required:
                  - status
      description: |-
        Report first activation of a student or teacher for this entitlement. 
        In addition to that the total number of provisioned, activated, blocked and cancelled are passed to the MP.


        This API is only implemented by the MP. LMS and LA will give an exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
      security:
        - APIKey:
            - la.entitlement.activation
    parameters: []
  /entitlements/changelicenseestatus:
    post:
      summary: ChangeLicenseeStatus
      operationId: post-entitlements-changelicenseestatus
      responses:
        '200':
          description: |
            OK, the request is processed.

            status - Message
            0 - All fine
            1 - Entilement not found for this school
            2 - Entitlement not in right state for this action
            3 - This UserId is unknown
            4 - This EckId is unknown
            5 - UserId has not activated this entitlement, so status cannot be changed
            6 - EckId has not activated this entitlement, so status cannot be changed
            7 - NewStatus value not correct
            99- Other, see statusMessage for details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 'Result status (0=OK, see list with Errors)'
                  statusMessage:
                    type: string
                required:
                  - status
      description: |-
        This call is used to change the status of one individual licensee within an entitlement. When an entitle activates the entitlement for the first time the status for this entitlee is activated. after that moment the MP can use this call to change the status to cancelled or blocked (or back to active). 
        The LA can return several errors as result of this request. See error table.
        The LMS will accept any new status and use that to display or remove access links to the course in the LA.


        This endpoint is only implemented by the LA and LMS. The MP should give an exception.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                entitlement:
                  type: string
                userId:
                  type: string
                eckId:
                  type: string
                newStatus:
                  type: string
                  enum:
                    - blocked
                    - active
                    - cancelled
        description: ''
      security:
        - APIKey:
            - mp.entitlement
    parameters: []
  /entitlements/changestatus:
    post:
      summary: Change Entitlement Status
      operationId: post-entitlements-changestatus
      responses:
        '200':
          description: |-
            OK, the request is processed 

            status - Message
            0 - All fine
            2 - Entitlement not in right state for this action
            3 - Cannot change status, see statusMessage for details
            4 - NewQuantity is not an acceptable value
            99- Other, see statusMessage for details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 'Result status (0=OK, see list with Errors)'
                  statusMessage:
                    type: string
                required:
                  - status
      description: |-
        Change the status of an entitlement. Both Status and quantity can be changed.

        This endpoint is only implemented by the LA and LMS. The MP should give an exception.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                entitlementId:
                  type: string
                newStatus:
                  type: string
                  enum:
                    - blocked
                    - active
                    - cancelled
                newQuantity:
                  type: integer
              required:
                - entitlementId
        description: ''
      security:
        - APIKey:
            - mp.entitlement
components:
  schemas:
    Entitlement:
      title: Entitlement
      type: object
      description: 'The core object that expresses information about a product that a school or indivdiual has selected for use - typically via a LML, but not always.'
      x-tags:
        - entitlements
      properties:
        schemaVersion:
          type: integer
        id:
          type: string
          example: 24e39454-5360-4ba4-819f-03e59b8dd679
        contractId:
          type: string
          description: An optional unique identifier for the purchase agreement. Mandatory within the communication between MP/SA and LA
        startDate:
          type: string
          format: date
          example: '2021-08-22'
        endDate:
          type: string
          format: date
        entitlementType:
          type: string
          description: 'The type of the entitlement. '
          enum:
            - school
            - schoolsubject
            - entitlees
            - individual
        expirationDate:
          type: string
          description: 'Date - time Expiration date, is the date on which the product can no longer be converted to a license. The agreement to activate the product has expired. This does not say anything about being able to use the product after activation before this date.'
          format: date
        product:
          $ref: '#/components/schemas/Product'
        entitlee:
          $ref: '#/components/schemas/Entitlee'
        quantity:
          type: integer
          example: 100
          format: int32
          description: maximum quantity
        status:
          type: string
          description: 'The status of the entitlement '
          enum:
            - entitled
            - provisioned
            - activated
            - cancelled
            - blocked
          default: entitled
          example: entitled
      required:
        - id
        - startDate
        - endDate
        - product
        - entitlee
        - status
    Product:
      title: Product
      type: object
      description: 'A product that can be accessed after being purchased or selected. The product details should be pickedup via the catalogue API. '
      x-tags:
        - entitlements
      properties:
        ean:
          type: string
      required:
        - ean
    School:
      title: School
      type: object
      description: |-
        The school as entitlee.
        This can be in 3 forms: 
        - the school will use this entitlement for the quantitee specified. 
        - when entitlees is filled: the entitlees list specifies which students in the school are entitled
        - when subject is filled: each student who has this stubject choice is entitled to this product. The LA can make this match based on sis data
      x-tags:
        - entitlements
      x-examples:
        example-1:
          schoolId: string
          schoolName: string
          subjects:
            - subject:
                subjectCode: string
                schoolSubjectCode: string
                schoolSubjectName: string
                level: string
                levelYear: 0
                schoolLevelCode: string
              quantity: 0
          entitlees:
            - id: string
              display_name: string
              email: string
              eckId: string
              userId: string
          quantity: 100
      properties:
        schoolId:
          type: string
          description: |
            The ID for the school
        schoolName:
          type: string
          description: The name for the school
        schoolSubjects:
          type: array
          description: 'List of chools subject . when filled: each student who has this school stubject is entitled to this product. The LA can make this match based on sis data'
          items:
            type: object
            properties:
              schoolSubject:
                $ref: '#/components/schemas/SchoolSubject'
              quantity:
                type: integer
                description: Quantity selected or purchased.
        entitlees:
          type: array
          description: List of students in the school who has rigth to this entitlement
          items:
            $ref: '#/components/schemas/Individual'
        quantity:
          type: integer
          example: 100
          description: 'Quantity available to the school, used if no subjects provided.'
      required:
        - schoolId
    Individual:
      title: Individual
      type: object
      description: Information about an individual who has an entitlement to use a specific product that they have purchased or selected.
      x-tags:
        - entitlements
      properties:
        display_name:
          type: string
          description: The name of the person purchasing.
        email:
          type: string
          description: 'The email address of the person purchasing, used to notify the individual of fulfilment and provide access.'
        eckId:
          type: string
          description: 'If needed, the ECK-ID of the individual.'
        userId:
          type: string
          description: userid. (nledupersonrealId or nledupersonprofileId)
      required:
        - display_name
        - email
    SchoolSubject:
      title: SchoolSubject
      type: object
      description: 'A SchoolSubject within a school that the entitlement is applicable to - typically a subject and level. So every student who has this subject is entitled to the products in this entitlement. (Todo: what is primary key and is this matchable on SIS data?)'
      x-tags:
        - entitlements
      properties:
        subjectCode:
          type: string
          description: 'Government standard subject code. bron: Ministerie van OCW, like https://zoek.officielebekendmakingen.nl/stcrt-2019-35044'
        schoolSubjectCode:
          type: string
          description: 'Code that the school gives: like ''en'''
        schoolSubjectName:
          type: string
          description: 'School description of this subject, may differ from standard. like ''queens english'''
        level:
          type: string
          description: 'Official Level. example ''havo, vwo, etc.''. Todo : add link to offical code/list'
        levelYear:
          type: integer
          description: Learning year (eg 1)
        schoolLevelCode:
          type: string
          description: 'School code of the Level/couse/study. example ''Technasium'' This gives schools a way to name the course how they want it, while we still have a link with the official level'
      required:
        - subjectCode
        - level
    Entitlements:
      title: Entitlements
      type: array
      items:
        $ref: '#/components/schemas/Entitlement'
      description: This is a list of entitlements that can be made available or retrieve in bulk.
      x-tags:
        - entitlements
    Entitlee:
      title: Entitlee
      x-tags:
        - entitlements
      oneOf:
        - $ref: '#/components/schemas/School'
        - $ref: '#/components/schemas/Individual'
    Activation:
      title: Activation
      type: object
      x-tags:
        - entitlements
      description: |-
        Initial activation for a student/teacher based on a entitlement.
        In addition the new totals for this entitlement are supplied.
      properties:
        entitlementId:
          type: string
        schemaVersion:
          type: integer
          description: 'schema version of this event/object. Start with 0, inclement when we have changes, so we know how to deserialise.'
        userId:
          type: string
          description: userid. (nledupersonrealId or nledupersonprofileId)
        eckId:
          type: string
        activationDate:
          type: string
          format: date-time
          description: ISO8601
        newTotals:
          type: object
          properties:
            provisioned:
              type: integer
            activated:
              type: integer
            blocked:
              type: integer
            cancelled:
              type: integer
      required:
        - entitlementId
        - activationDate
  securitySchemes:
    APIKey:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: ''
          refreshUrl: ''
          scopes:
            mp.entitlement: scope needed to request entitlement from the mp
            la.entitlement.activation: scope needed to send entitlement and updates to an LA
      description: ''
x-tags:
  - name: entitlements
  - name: provider
  - name: school

openapi: 3.0.0
info:
  title: Entitlement API
  version: '1.0'
  description: |
    This is an API that handles the comunication of entitlements between MP, LA and LMS.

    The Entitlements are the core of the SEM ecosystem and are created in the MP as a result of a school selecting learning material for the students. The MP creates entilements and send these to the LA to make sure students have access to the material. The entitlements are also send to the LMS so the LMS can create url/links for each student to the website of the LA.

    _*Status POC2: Most of the API is synchronious as it is important that all parties share exactly the same view of the entitlements. After POC2 there will be a change to event based flows where the POST endpoints will be replaced by events and confirmation events *_

    The MP is in control, the LA will report when an entitlement is activated and became a license via the usage API. Both LMS and LA can request the latest status of the entitlements by the MP.

    Actual usage of an entitlement can be requested via the Usage API.

    This API is implemented by MP, LA and LMS, but not all parties will implement the same endpoints. 

    Endpoint | provider | client | remark
    -- | --- | --- | -----
    POST /entitlements | LA, LMS | MP | Send a new or updated entitlements
    POST /entitlements/changelicenseestatus | LA, LMS | MP |change status for a specific entitlee/licensee
    GET /entitlements | MP | LA, LMS | get entilement to check status
    GET /entitlements/school | MP | LA, LMS | get entilements per school to check status

    When a request is send to an endpoint this party does not provide : a 405 Method not allowed should be returned

    ## Events
    After POC2: The Entitlements APi will use the event mechanisme. The MP will send the sttaus of the entitlement to LA and LMS. At some moments the LMS and LA need to respond with a confirmation event that the entilement or changes are recieved and process.

    ## Scopes
     
    Data from in the entitlements can be sensitive, and the APIs available to a requesting service depend on the scopes requested and approved during setup.  The following scopes exist for the Entitlements, and map to the following entities and attributes:

    `mp.entitlement` - scope that allows MP to send entitlements and updates, allows LA,LMS to retrieve entitlements
  contact:
    name: Stichting SEM
    url: 'https://stichtingsem.org/'
    email: mcginkel@gmail.com
servers:
  - url: 'https://example.stichtingsem.org/api'
    description: entitlement
paths:
  '/entitlements/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Specific identifier of an entitlement.
    get:
      summary: Get a specific entitlement
      x-tags:
        - entitlements
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entitlement'
        '405':
          description: Method Not Allowed
      operationId: get-entitlements-by-id
      description: |-
        Retrieve the full specification for an entitlement from a marketplace, always scoped per school

        This API is only implemented by the MP. LMS and LA will give an 405 HTTP status as result when called
      security:
        - APIKey:
            - mp.entitlement
  '/entitlements/school/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: School identifier.
    get:
      summary: Get all entitlements for a specific school
      x-tags:
        - entitlements
        - school
      parameters:
        - in: query
          name: status
          description: Filter by status
          schema:
            type: string
            example: provisioned
            enum:
              - entitled
              - provisioned
              - cancelled
              - blocked
        - in: query
          name: start
          description: 'Start point for pagination of results, defaults to 0,'
          schema:
            type: integer
          examples:
            default:
              value: 0
              summary: The start point for pagination
        - in: query
          name: limit
          description: 'Limit of number of results returned by page, defaults to 20 with max 100.'
          schema:
            type: integer
            maximum: 100
          examples:
            default:
              value: 20
              summary: The default value if none is provided
            max:
              value: 100
              summary: The largest recommended page size
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entitlements'
        '405':
          description: Method Not Allowed
      operationId: get-entitlements-school-id
      security:
        - APIKey:
            - mp.entitlement
      description: |-
        Retrieve all entilements for a specific school, the school will have approved the LMS and LA to have access to its Marketplace during the setup phase.

        This API has pagination, using `start` and `limit`, with an optional `status` filter.

        This API is only implemented by the MP. LMS and LA will give an 405 HTTP status as result when called
  /entitlements:
    post:
      summary: AcceptEntitlement
      operationId: accept-entitlements
      responses:
        '200':
          description: |-
            OK, the request is processed 

            status - Message
            0 - All fine
            1 - Entitlement already exists
            x - <to be defined>
            x - <to be defined>

            99- Other, see statusMessage for details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitlementConfirmation'
              examples: {}
        '405':
          description: Method Not Allowed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitlementEvent'
            examples: {}
      description: |-
        *NOTE:This Endpoint is defined for POC-2. It will be deprecate after that phase and the POST request is replaced by 2 events: NewEntitlement, ChangeEntitlement, with corresponding EntitlementConfirmation. The name of the objects in the body and response are already name ..event.. *

         
        The entitlement endpoint POST request is the request to send a entitlement from the MP to the LA or LMS.
        This is a synchronious call, processing is a legal contract. A response with a processed timestamp and a confirmation id is mandatory as response.

        This endpoint is only implemented by the LA and LMS. The MP should give an 405 HTTP status as result when called
      security:
        - APIKey:
            - mp.entitlement
  /entitlements/changelicenseestatus:
    post:
      summary: ChangeLicenseeStatus
      operationId: post-entitlements-changelicenseestatus
      responses:
        '200':
          description: |
            OK, the request is processed.

            status - Message
            0 - All fine
            1 - Entilement not found for this school
            2 - Entitlement not in right state for this action
            3 - This UserId is unknown
            4 - This EckId is unknown
            5 - UserId has not activated this entitlement, so status cannot be changed
            6 - EckId has not activated this entitlement, so status cannot be changed
            7 - NewStatus value not correct
            99- Other, see statusMessage for details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeLicenseeConfirmation'
        '405':
          description: Method Not Allowed
      description: |-
        *NOTE:This Endpoint is defined for POC-2. It will be deprecate after that phase and the POST request is replaced by 2 events: ChangeLicenseeStatusEvent, with corresponding ChangeLicenseeStatusConfirmation*

        This call is used to change the status of one individual licensee within an entitlement. When an entitle activates the entitlement for the first time the status for this entitlee is activated. after that moment the MP can use this call to change the status to cancelled or blocked (or back to active). 
        The LA can return several errors as result of this request. See error table.
        The LMS will accept any new status and use that to display or remove access links to the course in the LA.


        This endpoint is only implemented by the LA and LMS. The MP should give an 405 HTTP status as result when called
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeLicenseeEvent'
        description: ''
      security:
        - APIKey:
            - mp.entitlement
    parameters: []
components:
  schemas:
    Entitlement:
      title: Entitlement
      type: object
      description: 'The core object that expresses information about a product that a school or indivdiual has selected for use - typically via a LML, but not always.'
      x-tags:
        - entitlements
      properties:
        schemaVersion:
          type: integer
        id:
          type: string
          example: 24e39454-5360-4ba4-819f-03e59b8dd679
        contractId:
          type: string
          description: An optional unique identifier for the purchase agreement. Mandatory within the communication between MP/SA and LA
        startDate:
          type: string
          format: date
          example: '2021-08-22'
        endDate:
          type: string
          format: date
          description: |
            moment when the entitlement was blocked or cancelled
        entitlementType:
          type: string
          description: 'The type of the entitlement. '
          enum:
            - school
            - schoolsubject
            - personal
            - schoolindividual
        activationUntilDate:
          type: string
          description: 'Date - time ActivationUntil date, is the date on which the product can no longer be converted to a license. The agreement to activate the product has expired. This does not say anything about being able to use the product after activation before this date.'
          format: date
        product:
          $ref: '#/components/schemas/Product'
        entitlee:
          $ref: '#/components/schemas/Entitlee'
        status:
          type: string
          description: 'The status of the entitlement '
          enum:
            - entitled
            - provisioned
            - cancelled
            - blocked
            - link-ready
          default: entitled
          example: entitled
      required:
        - id
        - startDate
        - entitlementType
        - activationUntilDate
        - product
        - entitlee
        - status
    Product:
      title: Product
      type: object
      description: 'A product that can be accessed after being purchased or selected. The product details should be pickedup via the catalogue API. '
      x-tags:
        - entitlements
      properties:
        productId:
          type: string
          description: |
            Unique identification of a product, like ean.
      required:
        - productId
    School:
      title: School
      type: object
      description: |-
        The school as entitlee.
        This can be in 3 forms: 
        - the school will use this entitlement for the quantity specified. 
        - when entitlees is filled: the entitlees list specifies which students in the school are entitled
        - when schoolSubject is filled: each student who has this schoolSubject is entitled to this product. The LA can make this match based on sis data
      x-tags:
        - entitlements
      x-examples:
        example-1:
          schoolId: string
          schoolName: string
          subjects:
            - subject:
                subjectCode: string
                schoolSubjectCode: string
                schoolSubjectName: string
                level: string
                levelYear: 0
                schoolLevelCode: string
              quantity: 0
          entitlees:
            - id: string
              displayName: string
              email: string
              eckId: string
              userId: string
          quantity: 100
      properties:
        schoolId:
          type: string
          description: |
            The Id for the school
        schoolSubjects:
          type: array
          description: 'List of school subjects. when filled: each student who has this school stubject is entitled to this product. The LA can make this match based on sis data'
          items:
            type: object
            properties:
              schoolSubjectId:
                type: string
                description: Meaningless uuid/guid chosen by the SIS
              quantity:
                type: integer
                description: Quantity selected or purchased.
            required:
              - schoolSubjectId
        entitlees:
          type: array
          description: List of students in the school who has rigth to this entitlement
          items:
            $ref: '#/components/schemas/SchoolEntitlee'
        quantity:
          type: integer
          example: 100
          description: Quantity available to the school
      required:
        - schoolId
    Individual:
      title: Individual
      type: object
      description: Information about an individual who has an entitlement to use a specific product that they have purchased or selected.
      x-tags:
        - entitlements
      properties:
        displayName:
          type: string
          description: The name of the person purchasing.
        email:
          type: string
          description: 'The email address of the person purchasing, used to notify the individual of fulfilment and provide access.'
        eckId:
          type: string
          description: 'If needed, the ECK-ID of the individual.'
        userId:
          type: string
          description: userid. (nledupersonrealId or nledupersonprofileId)
    SchoolEntitlee:
      title: SchoolEntitlee
      type: object
      x-tags:
        - entitlements
      description: |
        Student that recieves this entitlement (fixed on name)
      properties:
        eckId:
          type: string
          description: |-
            the ECK-ID of the individual.
            (either eckId or userId is required)
        userId:
          type: string
          description: userid. (nledupersonrealId or nledupersonprofileId)
    SchoolSubject:
      title: SchoolSubject
      type: object
      description: 'A SchoolSubject within a school that the entitlement is applicable to - typically a subject and level. So every student who has this subject is entitled to the products in this entitlement. (Todo: what is primary key and is this matchable on SIS data?)'
      x-tags:
        - entitlements
      properties:
        id:
          type: string
          description: Meaningless uuid/guid chosen by the SIS
        subjectCode:
          type: string
          description: 'Government standard subject code. bron: Ministerie van OCW, like https://zoek.officielebekendmakingen.nl/stcrt-2019-35044'
        schoolSubjectAbbr:
          type: string
          description: 'Abbriviation that the school gives: like ''en'''
        schoolSubjectName:
          type: string
          description: 'School description of this subject, may differ from standard. like ''queens english'''
        levels:
          type: array
          description: 'List of official levels this study and subject combination. could be multiple in case of schoollevel "Brugklas", "onderbouw", etc'
          items:
            type: object
            description: 'List of official levels this study and subject combination. could be multiple in case of schoollevel "Brugklas", "onderbouw", etc'
            properties:
              level:
                type: string
                description: |-
                  Official Level. 
                  Allowed values are: VO-PRO, VO-VMBO-BB, VO-VMBO-KB, VO-VMBO-GL, VO-VMBO-TL, VO-HAVO, VO-VWO 
                  As specified here: https://lod.onderwijsregistratie.nl/api/catalogus/v1/klasse?subject=http://lod.onderwijsregistratie.nl/cat/cdm/def/NiveauVO-v03.2'
              levelYear:
                type: integer
                description: Learning year (eg 1)
            required:
              - level
              - levelYear
        schoolLevel:
          type: string
          description: 'School name of the Level. example ''HAVO-2'',''Technasium-1'' This gives schools a way to name how they want it, while we still have a link with the official level'
      required:
        - id
        - schoolSubjectAbbr
        - schoolSubjectName
        - schoolLevel
      x-examples:
        example-1:
          id: a50cf922-5bd6-419d-a50b-a39ac5e5b48f
          subjectCode: '0071'
          schoolSubjectCode: en
          schoolSubjectName: Engels
          levels:
            - level: VO-VMBO-BB
              levelYear: 2
          schoolLevel: onderbouw-2
    Entitlements:
      title: Entitlements
      type: array
      items:
        $ref: '#/components/schemas/Entitlement'
      description: This is a list of entitlements that can be made available or retrieve in bulk.
      x-tags:
        - entitlements
    Entitlee:
      title: Entitlee
      x-tags:
        - entitlements
      oneOf:
        - $ref: '#/components/schemas/School'
        - $ref: '#/components/schemas/Individual'
    EntitlementEvent:
      title: EntitlementEvent
      type: object
      description: |-
        A new or updated entitlement is send from the MP to the LA and LMS. In some cases the LA or LMS will send an EntitlementConfirmationEvent to confirm this event.


        The entitlement is alwasy send as latest status. Many fields cannot be changed after initial "entitled" status. just the state can change or quantity be lowered.

        The event should always be processed once, the entitlementReferenceId is unique.
      properties:
        entitlementReferenceId:
          type: string
          description: |-
            ReferenceId for this request.
            Must be unique for this change. If a party recieves another event with the same ReferenceId value, the recieving party should not process the event again. It sould send the confirmation again.
        entitlement:
          $ref: '#/components/schemas/Entitlement'
      required:
        - entitlementReferenceId
        - entitlement
    EntitlementConfirmation:
      title: EntitlementConfirmation
      type: object
      description: |-
        The confirmation that is send back when the MP sends an event to the LA or LMS.
        The confirmation is not always needed, only in the following situations:
        - Entitlement status is entiled and send to LA: LA will respond back with a confirmation
        - Entitlement status is provided and send to LMS: LMS will respond back with a confirmation
        - Entitlement status is canceled and send to LA or LMS: LA or LMS will respond back with a confirmation
        - Entitlement status is blocked and send to LA or LMS: LA or LMS will respond back with a confirmation

        The entitlementReferenceId, entitlementId are echoed back to the MP, with a new entitlementReceiveId.

        Events (or Post requests) are only handled ones. If an event with the simular entitlementReferenceId is recieved the processing is only done the first time. The confirmation may be send multiple times, but always with the same entitlementReceiveId. In this way the MP can validate that the response is processed only once.

        status - Message
        0 - All fine
        1 - Entitlement cannot be found
        x - <to be defined>
        x - <to be defined>

        99- Other, see statusMessage for details
      properties:
        entitlementReferenceId:
          type: string
          description: The ReferenceId that was part of the request should be echo's here
        productId:
          type: string
        entitlementId:
          type: string
        entitlementReceiveId:
          type: string
        processedTimestamp:
          type: string
          format: date-time
          description: The moment that the change became effective in the LMS or LA
        newEntitlementStatus:
          type: string
          enum:
            - entitled
            - provisioned
            - link-ready
            - cancelled
            - blocked
          description: |-
            Confirmation of the next proposed status. 
            Example: after provisioned the LMS can propose link-ready
        'newEntitlementQuantity ':
          type: integer
          description: new total quantity for this entitlement
        success:
          type: boolean
          description: |
            Boolen indicating the the entitlement event was processed succesfully.
            When the LA disagrees with a certain change (example provisioned or cancelled) a false will be returned, along with a status code with the proper error
        status:
          type: integer
        statusMessage:
          type: string
          description: Extra description of the status
      required:
        - entitlementReferenceId
        - productId
        - entitlementId
        - entitlementReceiveId
        - processedTimestamp
        - newEntitlementStatus
        - success
        - status
    ChangeLicenseeConfirmation:
      title: ChangeLicenseeStatusConfirmation
      type: object
      description: |-
        The confirmation that is send back when the MP sends an changeLicenseeEvent to the LA or LMS.

        The LMS and MP will send a confirmation to the MP that the change is understood and processed

        The entitlementAndLicenseeReferenceId, entitlementId are echoed back to the MP, with a new entitlementAndLicenseeReceiveId.

        Events (or Post requests) are only handled ones. If an event with the simular entitlementAndLicenseeReferenceIdis recieved the processing is only done the first time. The confirmation may be send multiple times, but always with the same entitlementAndLicenseeReceiveId. In this way the MP can validate that the response is processed only once.

        status - Message
        0 - All fine
        1 - Entitlement cannot be found
        x - <to be defined>
        x - <to be defined>

        99- Other, see statusMessage for details
      properties:
        entitlementAndLicenseeReferenceId:
          type: string
        entitlementId:
          type: string
        productId:
          type: string
        entitlementAndLicenseeReceiveId:
          type: string
        processedtimestamp:
          type: string
          format: date-time
        newLicenseStatus:
          type: string
          enum:
            - activated
            - blocked
        success:
          type: boolean
          description: |-
            Boolen indicating the the changeLicenseeEvent was processed succesfully.
            When the LA disagrees with a certain change a false will be returned, along with a status code with the proper error. The LMS cannot disagree and should follow
        status:
          type: integer
        statusMessage:
          type: string
      required:
        - entitlementAndLicenseeReferenceId
        - entitlementId
        - productId
        - entitlementAndLicenseeReceiveId
        - processedtimestamp
        - newLicenseStatus
        - success
        - status
    ChangeLicenseeEvent:
      title: ChangeLicenseeEvent
      type: object
      properties:
        entitlementAndLicenseeReferenceId:
          type: string
        entitlementId:
          type: string
        userid:
          type: string
          description: userid. (nledupersonrealId or nledupersonprofileId)
        eckId:
          type: string
          description: |-
            the ECK-ID of the individual.
            (either eckId or userId is required)
        newLicenseStatus:
          type: string
          enum:
            - activated
            - blocked
      required:
        - entitlementAndLicenseeReferenceId
        - entitlementId
        - newLicenseStatus
  securitySchemes:
    APIKey:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: ''
          refreshUrl: ''
          scopes:
            mp.entitlement: scope needed to request entitlement from the mp
      description: ''
x-tags:
  - name: entitlements
  - name: provider
  - name: school

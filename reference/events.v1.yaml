openapi: 3.0.0
servers:
  - url: 'https://example.stichtingsem.org/api'
info:
  version: 1.0.0
  title: Generic Event Stream API
  description: |-
    The proposed architecture for the new ecosystem is based on an Event model, where each provider of data to the ecosystem provides a mechanism for other participants to securely subscribe to events that are of interest to them.

    The Event API is the mechanism, in conjunction with the Webhook API, that enables this event based notification mechanism to function reliably.  It enables subscribers to request events from the provider, and paginate through to the last place that it received a message.

    The events are posted to the URL that the eventhook registers. The body of the post contains a list of new events to be processed.

    Notes:
      - Pagination is essential - using start and limit semantics.
      - Oldest events first
      - Limits should be imposed on page size.
      - Filtering is available by matching specific event type.
      - Filtering is available on event time, so only events after a date can be requested to catchup
      
    Providers should ensure that this API is cacheable or able to be retrieved at minimal cost, as it may be accessed a lot by consumers who are 'catching up'
      
    Note:  The consent API can be used to create events of all entities to enable an initial synchronisation of all data (e.g. a brand new LA that wants to do an initial synchronisation with data from the SIS)

    ## Scopes and security
    Before you can send an event, a token is needed with the scope and schoolidentity to send the event

    Event type | Scope needed | Description
    -- | -- | --
    `la.catalogue` | la.catalogue | A product in the catalogue has been created or modified or deleted  
    `la.course` | la.course | A course has changed
    `sis.student` | sis.student-teacher-group | A student has been created or modified   
    `sis.student-delivery` | sis.student-teacher-delivery | A students delivery information has been created or modified     
    `sis.teacher` | sis.student-teacher-group | A teacher has been created or modified
    `la.usage.first` | la.usage | A student or teacher used a entitlement for the first time
    `la.usage.ongoing` | la.usage | A student or teacher used an entitlement
    `la.simpleprogress` | la.progress | progress event when a student finishes a part of a course

    after POC phase 2 we will use the following events as well:
    Event type | Scope needed | Description
    -- | -- | --
    `mp.entitlement` | mp.entitlement | A new entitlement
    `mp.entitlement.confirmation` | mp.entitlement | A confirmation of an entitlement
    `mp.entitlement.entitlee.` | mp.entitlement | A request to change status of one school entitlee
    `mp.entitlement.entitlee.confirmation` | mp.entitlement | A confirmation of an change of an entitlee in a entitlement

    events should only be processed once.
  contact:
    name: Stichting SEM
    url: 'https://stichtingsem.org/'
    email: mcginkel@gmail.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
x-tags:
  - name: events
    description: Operations related to event retrieval
paths:
  /events:
    get:
      description: Allows a subscriber to retrieve a list of past events. The provider will not keep the events indefinate. This API is intended when a party had downtime and needs to catchup on processing/receiving events. The intended retention is a few days to support catching up.
      x-tags:
        - events
      operationId: listEvents
      parameters:
        - in: query
          name: type
          description: 'Filter by a specific type of event, e.g. la.usage - specific to the service implementing the API.'
          schema:
            type: string
            example: la.usage
        - in: query
          name: start
          description: 'Start point for pagination of results, defaults to 0,'
          schema:
            type: integer
          examples:
            default:
              value: 0
              summary: The start point for pagination
        - in: query
          name: limit
          description: 'Limit of number of results returned by page, defaults to 20 with max 100.'
          schema:
            type: integer
            maximum: 100
          examples:
            default:
              value: 20
              summary: The default value if none is provided
            max:
              value: 100
              summary: The largest recommended page size
        - schema:
            type: number
          in: query
          name: createdAfter
          description: timestamp to filter on events created after a certain moment (unix epoch, seconds after 1 jan 1970)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
      summary: Get Events
      security:
        - APIKey:
            - la.catalogue
            - la.course
            - la.usage
            - la.progress
            - sis.student-teacher-group
            - sis.student-teacher-delivery
            - mp.entitlement
    post:
      summary: Receive Events
      operationId: post-events
      x-tags: '-events'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: id of the event
                    status:
                      type: integer
                      description: 'Result status (0=OK, see list with Errors)'
                    statusMessage:
                      type: string
                  required:
                    - id
                    - status
      description: |
        Endpoint to receive events. These are registered by the webhook api.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Event'
        description: |-
          Body contains a list of events so multiple events can be send in one request. Events can only be grouped in the same request if they are for the same school.
          Oldest events first.

          Events are processed asynchronously. The request should a response with status=0 as indication that the events are received in good order, not processed in good order. The only reason to reject events is when there is no consent/authorization to deliver events from that type for a school
      security:
        - APIKey:
            - la.catalogue
            - la.course
            - la.usage
            - la.progress
            - sis.student-teacher-group
            - sis.student-teacher-delivery
            - mp.entitlement
  /event:
    post:
      summary: Receive one event
      operationId: post-event
      x-tags: '-events'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 'Result status (0=OK, see list with Errors)'
                  statusMessage:
                    type: string
                required:
                  - status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        description: 'Events are processed asynchronously. The request should return a 200-OK as indication that the event is received in good order, not processed in good order.'
      description: Endpoint to receive one event. These are registered by the webhook api.
      security:
        - APIKey:
            - la.catalogue
            - la.course
            - la.usage
            - la.progress
            - sis.student-teacher-group
            - sis.student-teacher-delivery
            - mp.entitlement
components:
  schemas:
    Events:
      type: array
      x-tags:
        - events
      description: 'A list of events - reverse chronologically ordered, provided to enable subscribers to ''catch up'' on events they may have missed.'
      title: Events
      items:
        $ref: '#/components/schemas/Event'
    Event:
      type: object
      x-tags:
        - events
      description: |-
        An event is a notification that something of interest has happened within a service, that, based on authorised scopes, a subscriber may then process.  This enables systems to communicate with each other in a loosely coupled way, where the event creator has no direct connection to any of the subscribing systems.

        In the SEM context the events either send information on an event that happenened (usage, progress, results) or the latest status of an object that is passed for reference (SIS, Product, Course related  - Student, teacher, group, products, Course)
        The latest catagorie sends the latest version of the object, previous events may be ignored for these types.

        Events have their own id and an identification of the object they carry. (objectId) This can be used to make sure events are pocessed in order for that object. The create time of the event is the time the action that triggered the event happened, it is not the time the event was send or processed.

        Typically an event will contain a basic data object that indicates what the state of the object is at the point at which the event is raised, but this is optional.  In the case that no data object exists it is intended that the subscribing system would call back to the provided API to retrieve the information. This is defined per event type.

        By calling back at a future point you avoid a number of distributed system related issues:
        - Ordering doesn't matter, as when you call back you always get the latest version.  The biggest risk is you call back twice and get the same information twice - but you always have correct data.
        - Security can be checked again at the point of request, so even in the unlikely scenario that a subscriber authorization changes between an event being emitted and the call back occurring, the subscriber can only ever get data they are authorized to retrieve.

        Deleting of object is supported by sending an event with the flag isDeleteEvent to true. This indicates that this is the last event you will get about this object. the data is empty in this case.
      x-examples: {}
      title: Event
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: Unique id of an event
        schemaVersion:
          type: integer
          description: 'schema version of this event/object. Start with 0, increment when we have changes, so we know how to deserialise.'
        type:
          type: string
          example: la.usage.first
          description: Type of the event
          enum:
            - la.catalogue
            - la.course
            - sis.student
            - sis.student-delivery
            - sis.teacher
            - mp.entitlement.new
            - mp.entitlement.change
            - mp.entitlement.confirmation
            - mp.entitlement.entitlee.change
            - mp.entitlement.entitlee.confirmation
            - la.usage.first
            - la.usage.ongoing
            - la.simpleprogress
        objectId:
          type: string
          description: Id of the events data
        created:
          type: string
          description: event creation moment (seconds after 1970?)
          format: date-time
        schoolId:
          type: string
        data:
          $ref: '#/components/schemas/EventData'
        url:
          type: string
          description: |
            The URL that can be called to get the dataobject for this event.
        isDeleteEvent:
          type: boolean
          description: 'indication that this is the last event you will ever see, as the object is deleted.'
      required:
        - id
        - type
        - created
    EventData:
      title: EventData
      description: Data of event object.  (dependent on type in event).
      x-tags:
        - events
      oneOf:
        - $ref: ./sisdata.v1.yaml#/components/schemas/Student
        - $ref: ./sisdata.v1.yaml#/components/schemas/StudentDelivery
        - $ref: ./sisdata.v1.yaml#/components/schemas/Teacher
        - $ref: ./sisdata.v1.yaml#/components/schemas/Group
        - $ref: ./catalogue.v1.yaml#/components/schemas/Product
        - $ref: ./course.v1.yaml#/components/schemas/Course
        - $ref: ./usage.v1.yaml#/components/schemas/UsageEvent
        - $ref: ./progress.v1.yaml#/components/schemas/SimpleProgress
        - $ref: ./entitlement.v1.yaml#/components/schemas/EntitlementEvent
        - $ref: ./entitlement.v1.yaml#/components/schemas/EntitlementConfirmation
        - $ref: ./entitlement.v1.yaml#/components/schemas/ChangeLicenseeEvent
        - $ref: ./entitlement.v1.yaml#/components/schemas/ChangeLicenseeConfirmation
        - nullable: true
  securitySchemes:
    APIKey:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: ''
          refreshUrl: ''
          scopes:
            la.catalogue: ''
            la.course: ''
            la.usage: ''
            la.progress: ''
            sis.school: ''
            sis.student-teacher-group: ''
            sis.student-teacher-delivery: ''
            mp.entitlement: ''

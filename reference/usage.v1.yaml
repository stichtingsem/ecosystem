openapi: 3.0.0
info:
  title: Usage API
  version: '1.3.0'
  description: |
    This is an API provided by the Learning Application (LA) in the SEM ecosystem, and is designed for a learning application to make information about activation and usage of a product by a teacher or student known to the Marketplace (MP) and/or the Learning Management System (LMS).

    ## Events
    The LA sends a Usage Event for a single Student or Teacher and for an entitlement and a single Product from that entitlement. This implies that in case of a set or combi product with more than one digital product, a Usage Event is send for the overall Product (the set) and for all underlying Products (the bundled Products).
    
    In the SEM Ecosystem we distinguish two different Usage Events:
    - `la.InitialActivation` - Event sent by the LA after a Student or Teacher activates a Learning Material. An Entitlement is found and a License is created for the Student or Teacher. The first time a Product is being used.
    - `la.Usage` - Events sent bij the LA after a Student or Teacher uses a product. This could also be a periodic event for weekly, monthly active use.

    Within the Usage Event the type of usage is specified. The following options are available:
    - initial-activation - applicable to the InitialActivation Event.
    - unique-usage - for every time a Student or Teacher uses a Product.
    - weekly-usage - periodically whenever there was active usage in a week.
    - monthly-usage -  periodically whenever there was active usage in a month.
    
    The Usage Events allow LA and MP to offer Products where Schools (and MP) (periodically) pay-per-use.
     
    ## Scopes
    The Usage API consists of two scopes:
    -  `la.usage.activation` - a scope that allows a MP or LMS to receive InitialActivation events from the LA.
    -  `la.usage.usage` - a scope that allows a MP or LMS to receive Usage events from the LA.
    
    ## Consent
    This API requires consent of a School for communication between the LA and the LMS.
    
    No consent is required for communication between the MP and the LA. Exchange of information is required.
    
    ## Endpoints
    This API consists of two endpoints which allows a MP or LMS to gather all Usage information for an Entitlement or a Student or Teacher.
    
  contact:
    name: SEM
    url: 'https://stichtingsem.org/'
servers:
  - url: 'https://example.stichtingsem.org/api'
    description: usage

components:
  schemas:
    
    schemaVersion:
      type: string
      description: 'Schema version of this event/object using semantic versioning 2.0.0'
      default: 1.3.0
    
    InitialActivation:
      title: InitialActivation
      type: object
      x-tags:
        - InitialActivation
      description: |
        The Event a LA sends to the MP and optionally LMSs after a Student or Teacher activates (and first uses) a Product. The Student or Teacher executes its right to activate the Product and gets a License on the Product.
      properties:
        entitlementId:
          type: string
          format: uuid
          description: 'The Entitlement which included the right of the Student or Teacher to activate the Product.'
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        productId:
          type: string
          description: 'Refers to a (bundled) product on the Entitlement.'
        schoolId:
          type: string
          description: 'Refers to the schoolId on the Entitlement (entitlementId). Only applicable to School Entitlements.'
        eckId:
          type: string
          description: |-
            The ECK-ID of the Student or Teacher who activated the Product.
            (either eckId or userId is required)
        userId:
          type: array
          description: |
            The User ID(s) of the Student or Teacher who activated the Product.
            (either eckId, userId is required)
          items:
            type: object
            properties:
              userId:
                type: string
              userIdType:
                type: string
                enum:
                  - nlPersonProfileId
                  - nlPersonRealId
                  - Las-key
                  - Leerlingnummer
                  - Medewerkernummer
            required:
              - userId
              - userIdType
        activationCode:
          type: string
          description: 'In case the Product has been activated by an activation code, the LA reports here that the activation code is being issued.'
        usageDate:
          type: string
          format: date
          description: 'The date the Product has been activated. Format: YYYY-MM-DD (according to RFC3339).'
        usageType:
          type: string
          default: initial-activation
          description: 'Within the InitialActivation event this value is always initial-activation'
          enum:
            - initial-activation
            - unique-usage
            - weekly-usage
            - monthly-usage
        expirationDate:
          type: string
          format: date
          description: |
            The expiration date until this Student or Teacher has the right to use the Product. Format: YYYY-MM-DD (according to RFC3339).
            In case the Entitlement specified a minExpirationDate, the expirationDate equals this minExpirationDate or lies further in the future.
            The minExpiration date allows the LA to have license periods for each individual License on an Entitlement.
            The expirationDate is being used by the LMS to maintain the product and deep links for the Student or Teacher in the LMS.
      required:
        - entitlementId
        - schemaVersion
        - usageDate
        - usageType
        - expirationDate
    
    Usage:
      title: Usage
      type: object
      x-tags:
        - Usage
      description: |
        The Event a LA periodically sends to the MP and optionally LMSs after a Student or Teacher used a Product. The fields in this Event are similar to the InitialActivation Event. This allows Events Processers of the MP and the LMS to process both Event variants in a similar way.
      properties:
        entitlementId:
          type: string
          format: uuid
          description: 'The Entitlement which included the right of the Student or Teacher to activate the Product.'
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        productId:
          type: string
          description: 'Refers to a (bundled) product on the Entitlement.'
        schoolId:
          type: string
          description: 'Refers to the schoolId on the Entitlement (entitlementId). Only applicable to School Entitlements.'
        eckId:
          type: string
          description: |-
            The ECK-ID of the Student or Teacher who used the Product.
            (either eckId or userId is required)
        userId:
          type: array
          description: |
            The User ID(s) of the Student or Teacher who used the Product.
            (either eckId, userId is required)
          items:
            type: object
            properties:
              userId:
                type: string
              userIdType:
                type: string
                enum:
                  - nlPersonProfileId
                  - nlPersonRealId
                  - Las-key
                  - Leerlingnummer
                  - Medewerkernummer
            required:
              - userId
              - userIdType
        usageDate:
          type: string
          format: date
          description: 'The date the Product has been last used. Format: YYYY-MM-DD (according to RFC3339).'
        usageType:
          type: string
          default: initial-activation
          description: 'Within the Usage event this value is unique-usage, weekly-usage, monthly-usage'
          enum:
            - initial-activation
            - unique-usage
            - weekly-usage
            - monthly-usage
        expirationDate:
          type: string
          format: date
          description: |
            The expirationDate as already reported within the InitialActivation Event. Format: YYYY-MM-DD (according to RFC3339).
            
            It is not allowed to change the date.
      required:
        - entitlementId
        - schemaVersion
        - usageDate
        - usageType
        - expirationDate
    
    EntitlementUsage:
      title: EntitlementUsage
      type: object
      x-tags:
        - Usage
      description: |
        This object reports all Usage information from a single Entitlement. Moreover, information from the Entitlement is added to create a reporting overview of quantities provisioned, licenses activated and active usage. This information was already send to the MP or LMS within InitialActivation and Usage events. The object is added for support reasons and allows the MP and LMS to gather status information on an Entitlement from the LA.
      properties:
        entitlementId:
          type: string
          format: uuid
          description: 'The identifier of the Entitlement.'
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        schoolId:
          type: string
          description: 'Refers to the schoolId on the Entitlement (entitlementId). Only applicable to School Entitlements.'
        status:
          type: string
          description: 'The status of the Entitlement as registered by the LA.'
          enum:
            - entitled
            - provisioned
            - link-ready
            - cancelled
            - blocked
        totalQuantity:
          type: integer
          description: 'The total quantity of the Entitlement as registered by the LA. This quantity is based on information received from the MP in Entitlement Events and can be the initial quantity that is provisioned but also the newQuantity in case the MP send a Entitlement Event with a change (reduction) in amount.'
        licenses:
          type: array
          description: 'The Licenses which are registered on the Entitlement. A License is created for a User who activated the product. For each License, the LA has send an InitialActivation event.'
          items:
            $ref: '#/components/schemas/licenseIndividual'
      required:
        - entitlementId
        - schemaVersion
        - status
        - totalQuantity
        - licenses
    
    IndividualUsage:
      title: IndividualUsage
      type: object
      x-tags:
        - Usage
      description: |
        This object reports all Usage information from a single Student or Teacher. This information was already send to the MP or LMS within InitialActivation and Usage events. The object is added for support reasons and allows the MP and LMS to gather status information for all entitlements and all licenses of a single Student or Teacher.
      properties:
        eckId:
          type: string
          description: |-
            The ECK-ID of the Student or Teacher.
            (either eckId or userId is required)
        userId:
          type: array
          description: |
            The User ID(s) of the Student or Teacher.
            (either eckId, userId is required)
          items:
            type: object
            properties:
              userId:
                type: string
              userIdType:
                type: string
                enum:
                  - nlPersonProfileId
                  - nlPersonRealId
                  - Las-key
                  - Leerlingnummer
                  - Medewerkernummer
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        licenses:
          type: array
          description: 'An array of all licenses of the Student or Teacher.'
          items:
            $ref: '#/components/schemas/licenseEntitlement'
      required:
        - schemaVersion
        - entitlementUsageList
    
    licenseIndividual:
      title: LicenseIndividual
      type: object
      x-tags:
        - Usage
      description: 'A single License of a Student or Teacher on a Product. This object is part of the overview of all Licenses for a single Entitlement.'
      properties:
        productId:
          type: string
          description: 'Refers to a (bundled) product from the Entitlement.'
        eckId:
          type: string
          description: |-
            The ECK-ID of the Student or Teacher with the License.
            (either eckId or userId is required)
        userId:
          type: array
          description: |
            The User ID(s) of the Student or Teacher with the License.
            (either eckId, userId is required)
          items:
            type: object
            properties:
              userId:
                type: string
              userIdType:
                type: string
                enum:
                  - nlPersonProfileId
                  - nlPersonRealId
                  - Las-key
                  - Leerlingnummer
                  - Medewerkernummer
            required:
              - userId
              - userIdType
        status:
          $ref: '#/components/schemas/status'
        usage:
          $ref: '#/components/schemas/usage'
      required:
        - status
        - usage
    
    licenseEntitlement:
      title: LicenseEntitlement
      type: object
      x-tags:
        - Usage
      description: 'A single License of a Student or Teacher on a Product. This object is part of the overview of all Licenses for a single Student or Teacher.'
      properties:
        entitlementId:
          type: string
          format: uuid
          description: 'The identifier of the Entitlement.'
        productId:
          type: string
          description: 'Refers to a (bundled) product from the Entitlement.'
        status:
          $ref: '#/components/schemas/status'
        usage:
          $ref: '#/components/schemas/usage'
      required:
        - entitlementId
        - status
        - usage
    
    status:
      title: status
      type: object
      x-tags:
        - Usage
      description: 'Includes the status information of a License including the expirationDate. In case the Product has been activated with an activation code, this code is also included into the status information.'
      properties:
        status:
          type: string
          description: 'The status of this license. Default value is activated and is being set after the InitialActivation. A MP can request the LA to (de)block access to a single License with the ChangeLicenseStatus Event. This status will then be changed to blocked or back to activated.'
          default: 'activated'
          enum:
            - 'activated'
            - 'blocked'
        activationCode:
          type: string
          description: 'In case the Product has been activated by an activation code, the LA reports here the activation code that has been issued.'
        expirationDate:
          type: string
          format: date
          description: |
            The expiration date of this License. Format: YYYY-MM-DD (according to RFC3339).
      required:
        - status
        - expirationDate
    
    usage:
      title: usage
      type: object
      x-tags:
        - Usage
      properties:
        firstUsed:
          type: string
          format: date
          description: |
            The date the Product has been activated (and first used) by the Student or Teacher. Format: YYYY-MM-DD (according to RFC3339).
            
            This date has been reported by the LA in the InitialActivation event.'
        lastUsed:
          type: string
          format: date
          description: |
            The date the Product has last been used by the Student or Teacher. Format: YYYY-MM-DD (according to RFC3339). This information is only exchanged within the scope of la.usage.usage.
        frequencyOfUsage:
          type: integer
          description: |
            Indicator how often the Student or Teacher has used the Product (count at moment of login).
            
            This information is optional and only exchanged within the scope of la.usage.usage.
      required:
        - firstUsed
    
    UserReference:
      type: object
      title: User reference
      x-tags:
        - Usage
      properties:
        eckId:
          type: string
          description: |-
            The ECK iD of the Student or Teacher.
            (either eckId or userId is required)
        userId:
          type: array
          description: |-
            The User ID(s) of the Student or Teacher.
            (either eckId or userId is required)
          items:
            type: object
            properties:
              userId:
                type: string
              userIdType:
                type: string
                enum:
                  - nlPersonProfileId
                  - nlPersonRealId
                  - Las-key
                  - Leerlingnummer
                  - Medewerkernummer
            required:
              - userId
              - userIdType
    
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: ''
          refreshUrl: ''
          scopes:
            la.usage.activation: 'a scope that allows a MP or LMS to receive InitialActivation events from the LA.'
            la.usage.usage: 'a scope that allows a MP or LMS to receive Usage events from the LA.'
      description: ''
paths:
  
  /usage/entitlements/{id}:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
      - schema:
          type: string
        name: schemaVersion
        in: query
        required: false
        description: optional parameter to request a response in a specific schema version. If none supplied, the server will choose its default schema version. See the Events API for a call to get the default schema version.
      - schema:
          type: integer
          format: int32
        name: start
        in: query
        description: 'Start point for pagination of results, default: 0'
        examples:
          default:
            value: 0
            summary: 'The start point for pagination'
      - schema:
          type: integer
          maximum: 100
          format: int32
        name: limit
        in: query
        description: 'Limit of number of results returned by page, default: 20 and max: 100'
        examples:
          default:
            value: 20
            summary: 'The default value if none is provided'
          max:
            value: 100
            summary: 'The largest recommended page size'
    get:
      summary: Get Usage by Entitlement
      x-tags:
        - Usage
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitlementUsage'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized - No valid token presented
        '403':
          description: Forbidden - No consent given to access the requested resource
        '404':
          description: Not Found
      operationId: get-usage-by-entitlement
      description: |
        Retrieve the full usage based on a entitlement-id, needs to confirm that the caller is able to access either based on their provider information (they can only see their own usage) in the case of the provider scope.
        Retrieve all Usage information from a single Entitlement. Moreover, information from the Entitlement is added to create a reporting overview of quantities provisioned, licenses activated and active usage. This information was already send to the MP or LMS within InitialActivation and Usage events. This endpoint is avilable for support reasons and allows the MP and LMS to gather status information on an Entitlement from the LA.
        
        This API has pagination, using `start` and `limit`.
      security:
        - OAuth2:
            - la.usage.activation
            - la.usage.usage
  
  /usage/individuals:
    post:
      summary: Search Usage by Individual
      x-tags:
        - Usage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userReference:
                  $ref: '#/components/schemas/UserReference'
                schemaVersion:
                  type: string
                  description: Optional parameter to request a response in a specific schema version. If none supplied, the server will choose its default schema version. See the Events API for a call to get the default schema version.
              required:
                - userReference
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IndividualUsage'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized - No valid token presented
        '403':
          description: Forbidden - No consent given to access the requested resource
        '404':
          description: Not Found
      operationId: post-search-usage-by-individual
      description: |
        Retrieve all Usage information from a single Student or Teacher. This information was already send to the MP or LMS within InitialActivation and Usage events. This endpoint is available for support reasons and allows the MP and LMS to gather status information for all entitlements and all licenses of a single Student or Teacher.
        
        This API has pagination, using `start` and `limit`.
        
        Due to the confidentiality of the eckId and userIds this endpoint has been implemented as a POST endpoint where the confidential information is securely send within the request body.
      security:
        - OAuth2:
            - la.usage.activation
            - la.usage.usage
      
x-tags:
  - name: InitialActivation
  - name: Usage

openapi: 3.1.0
info:
  title: Order API
  version: '1.3.0'
  description: |
    This is an API that handles the communication of orders between MP and LA.

    Orders can be used by the MP and the LA to communicate orderNumbers and orderLineNumbers from purchase or sales orders.
    Within the Documentation more information can be found how Orders, Entitlements, and Usage information can be used to close the money and goods flow between MP and LA.
    The contractId can be used to combine both orders and entitlements to one reporting entity. Because usage is linked to entitlements, also this data can be aggregated on the contractId.

    

    ## Events
    The MP is the initiator of Orders and sends OrderRequests or CreditOrderRequests to a LA. The LA responds with an OrderConfirmation or a CreditOrderConfirmation.
    The LA processes OrderRequests asynchronous. In some cases this can take hours or days, due to mandatory manual or legal processes (e.g. a credit check).
    In the confirmation message the LA replies if a certain activity is successfully performed. More information is available in the documentation document.
    
    The following events are included in the Order API:
    - `OrderRequest`: send by the MP to the LA to place an Order for a specified product.
    - `OrderConfirmation`: confirmation message send by the LA to the MP as a response to an OrderRequest.
    - `CreditOrderRequest`: send by the MP to the LA including a request to credit an order by the LA.
    - `CreditOrderConfirmation`: confirmation message send by the LA to the MP as a response to an CreditOrderRequest.

    ## Scopes
    Data is exchanged between MP and LA using the following scope:

    - `mp.order` - scope that allows MP to send OrderRequest and CreditOrderRequest events. The same scope is used by the LA to receive these events and send back OrderConfirmation or CreditOrderConfirmation confirmation messages to the MP.
    
    ## Consent
    The Order API does not contain sensitive information from Schools. Therefore, consent from Schools is not required.
    
  contact:
    name: Stichting SEM
    url: 'https://stichtingsem.org/'
servers:
  - url: 'https://example.stichtingsem.org/api'
    description: order
components:
  schemas:
  
    schemaVersion:
      type: string
      description: 'Schema version of this event/object using semantic versioning 2.0.0'
      default: 1.3.0
    
    OrderRequest:
      title: OrderRequest
      type: object
      x-tags:
        - Order
      description: |
        Event send by the MP to the LA to place an order with a quantity for a single Product.
      properties:
        requestReferenceId:
          type: string
          description: |
            Unique requestReferenceId for this request. This referenceId is used by the Event Mediator of the MP to match the OrderConfirmation conformation message(s) send by the LA.
            If a party receives another event with the same requestReferenceId value, the receiving party should not process the event again. It should send the confirmation again.
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        purchaseOrderId:
          type: string
          description: 'Purchase order number as defined by the MP. This number is linked to the financial system of the MP.'
        purchaseOrderLineId:
          type: string
          description: 'Optional line number in case of an order with more than one product.'
        productId:
          type: string
          description: 'The Product the MP orders. The productId can be retrieved from the Catalogue API from the LA.'
        quantity:
          type: integer
          example: 1
          description: 'The quantity of the Product the MP orders.'
        contractId:
          type: string
          description: 'An optional unique identifier for a contract between LA and MP where this request belongs to.'
        address:
          type: object
          description: 'An optional address where the product should be delivered. This field can be used for the delivery of physical products.'
          properties:
            street:
              type: string
            houseNumber:
              type: string
              description: 'includes additions (e.g. 55-A)'
            zipCode:
              type: string
            city:
              type: string
            countryCode:
              type: string
              description: 'According to Alpha-2 code from ISO 3166, e.g. NL'
            country:
              type: string
          required:
            - street
            - houseNumber
            - zipCode
            - city
            - country
      required:
        - requestReferenceId
        - schemaVersion
        - purchaseOrderId
        - productId
        - quantity
    
    OrderConfirmation:
      title: OrderConfirmation
      type: object
      x-tags:
        - Order
      description: |
        The confirmation that is send back when the MP sends a OrderRequest event to the LA.

        The LA will send a confirmation message back to the MP approving or declining the order request. In case the LA declines, a functional status code and message is replied. 

        Events are only handled ones. If an event with the similar requestReferenceId is received the processing is only done the first time. The confirmation may be send multiple times, but always with the same responseReferenceId. In this way the MP can validate that the response is processed only once.
        
        Functional status codes and messages are described in the Documentation.
      properties:
        requestReferenceId:
          type: string
          description: 'The requestReferenceId that was send by the MP as part of the OrderRequest event'
        responseReferenceId:
          type: string
          description: 'A reference to this confirmation message send by the LA to the MP.'
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        productId:
          type: string
          description: 'The productId which was part of the ActivationCodeRequest Event send by the MP. The activation codes give Students or Teachers the possibility to activate this Product.'
        quantity:
          type: integer
          example: 1
          description: 'The quantity of the Product the MP has ordered.'
        purchaseOrderId:
          type: string
          description: 'Purchase order number as defined by the MP. This number is linked to the financial system of the MP.'
        purchaseOrderLineId:
          type: string
          description: 'Optional line number in case of an order with more than one product.'
        salesOrderId:
          type: string
          description: 'Sales order number as defined by the LA. This number is linked to the financial system of the LA.'
        salesOrderLineId:
          type: string
          description: 'Optional line number in case of an order with more than one product.'
        processedTimestamp:
          type: string
          format: date-time
          description: |
            The moment that the order was processed by the LA. As Events and confirmation messages are send asynchronous, this is not the moment the confirmation message was send by the LA to the MP.

            Format: openapi in ZULU time as specified in RFC 3339, section 5.6
          example: "2017-07-21T17:32:28Z"
        orderStatus:
          type: string
          description: 'The status of pending allows the LA to communicate to the MP that the approval process has started, but has not yet been completed.'
          enum:
            - pending
            - approved
            - declined
        success:
          type: boolean
          description: |
            Boolean indicating the OrderRequest event was processed successfully.
            When the LA declines the request a false will be returned, along with a status code and a status message.
        status:
          type: integer
          description: 'See functional status codes within the Documentation.'
        statusMessage:
          type: string
          description: 'See functional status messages within the Documentation.'
      required:
        - requestReferenceId
        - responseReferenceId
        - schemaVersion
        - processedTimestamp
        - orderStatus
        - success
        - status
    
    CreditOrderRequest:
      title: CreditOrderRequest
      type: object
      x-tags:
        - Order
      description: |
        Event send by the MP to the LA with a request to credit an order. The request has the flexibility to include references known within systems of the LA.
      properties:
        requestReferenceId:
          type: string
          description: |
            Unique requestReferenceId for this request. This referenceId is used by the Event Mediator of the MP to match the CreditOrderConfirmation conformation message(s) send by the LA.
            If a party receives another event with the same requestReferenceId value, the receiving party should not process the event again. It should send the confirmation again.
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        purchaseOrderId:
          type: string
          description: 'Purchase order number of the order to be credited as defined by the MP. This number is linked to the financial system of the MP.'
        purchaseOrderLineId:
          type: string
          description: 'Optional line number in case of an order with more than one product.'
        salesOrderId:
          type: string
          description: 'Sales order number of the order to be credited as defined by the LA. This number is linked to the financial system of the LA.'
        salesOrderLineId:
          type: string
          description: 'Optional line number in case of an order with more than one product.'
        responseReferenceId:
          type: string
          description: "Optional reference to the responseReferenceID of the confirmation message in which the LA approved the order to the MP."
      required:
        - requestReferenceId
        - schemaVersion
        - purchaseOrderId
    
    CreditOrderConfirmation:
      title: CreditOrderConfirmation
      type: object
      x-tags:
        - Order
      description: |
        The confirmation that is send back when the MP sends a CreditOrderRequest event to the LA.

        The LA will send a confirmation message back to the MP including a success parameter indicating if the LA approves or declines the credit request. In case of a decline, the LA replies with a functional status code and message. 

        Events are only handled ones. If an event with the similar requestReferenceId is received the processing is only done the first time. The confirmation may be send multiple times, but always with the same responseReferenceId. In this way the MP can validate that the response is processed only once.
        
        Functional status codes and messages are described in the Documentation.
      properties:
        requestReferenceId:
          type: string
          description: 'The requestReferenceId that was send by the MP as part of the CreditOrderRequest event'
        responseReferenceId:
          type: string
          description: 'A reference to this confirmation message send by the LA to the MP.'
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        purchaseOrderId:
          type: string
          description: 'Purchase order number of the order to be credited as defined by the MP. This number is linked to the financial system of the MP.'
        purchaseOrderLineId:
          type: string
          description: 'Optional line number in case of an order with more than one product.'
        salesOrderId:
          type: string
          description: 'Sales order number of the order to be credited as defined by the LA. This number is linked to the financial system of the LA.'
        salesOrderLineId:
          type: string
          description: 'Optional line number in case of an order with more than one product.'
        processedTimestamp:
          type: string
          format: date-time
          description: |
            The moment that the credit order was processed by the LA. As Events and confirmation messages are send asynchronous, this is not the moment the confirmation message was send by the LA to the MP.
            
            Format: openapi in ZULU time as specified in RFC 3339, section 5.6
          example: "2017-07-21T17:32:28Z"
        creditOrderStatus:
          type: string
          description: 'The status of pending allows the LA to communicate to the MP that the approval process has started, but has not yet been completed.'
          enum:
            - pending
            - approved
            - declined
        success:
          type: boolean
          description: |
            Boolean indicating the CreditOrderRequest event was processed successfully.
            When the LA declines the request a false will be returned, along with a status code and a status message.
        status:
          type: integer
          description: 'See functional status codes within the Documentation.'
        statusMessage:
          type: string
          description: 'See functional status messages within the Documentation.'
      required:
        - requestReferenceId
        - responseReferenceId
        - schemaVersion
        - activationCode
        - processedTimestamp
        - success
        - status
    
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.example.com/oauth2/token
          refreshUrl: https://api.example.com/oauth2/token
          scopes:
            mp.order: 'scope needed to send and receive Order and CreditOrder Events and Confirmation messages'
      description: ''

x-tags:
  - name: Order
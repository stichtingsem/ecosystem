openapi: 3.0.0
info:
  title: SIS API
  version: '1.3.0'
  description: |
    This is an API provided by the SIS in the SEM ecosystem, and is designed to enable a SIS to make the core information about students, teachers, subjects and groups available to the rest of the ecosystem in a security and privacy conscious way.

    # Events

    It is envisaged that the service implementing this API, also implements the generic [Events](https://stichtingsem.stoplight.io/docs/sem-technology-prototype/reference/events.v1.yaml) API to enable subscription to changes instead of polling.

    Events generated by the SIS API are connected to state changes for key entities:

     - `sis.Student` - A student has been created, modified or deleted  
     - `sis.StudentDelivery` - A students delivery information has been created, modified or deleted
     - `sis.Teacher` - A teacher has been created, modified or deleted
     - `sis.Group` - A group has been created, modified or deleted
     - `sis.SchoolSubject` - A school subject has been created, modified or deleted
     - `sis.SchoolPeriod`- A school period has been created, modified or deleted
     
    Events about students, teachers and groups is scoped per school period. Each school period a new set of events is generated. A receiving system (LMS/LA/MP) should check if the events are for the current school period or already for the next school period.

    # Privacy and Scopes
     
    Data from the SIS is sensitive, and the events and APIs available to a requesting service depend on the scopes requested and approved during setup. The following scopes exist for the SIS, and map to the following entities and attributes:
    
    `sis.school` - This scope enables a requestor to get basic information about school: periods and subjects
    
    `sis.student-teacher-group` - This scope enables a requestor to get basic information about a user (student or teacher) to enable that platform to present appropriate information or a basic profile for them and understand what groups or subjects they are enrolled in or teach.

    `sis.student-teacher-delivery` - This scope enables a requestor to get additional information required to support the physical delivery of books or other material directly to an individual.  This exchange includes PII, and would be requested in addition the basic `sis.student-teacher-group` scope, so the following should be read as additive to that scope.

  contact:
    name: SEM
    url: 'https://stichtingsem.org/'
servers:
  - url: 'https://example.stichtingsem.org/api'
    description: sisdata
components:
  schemas:
  
    schemaVersion:
      type: string
      description: 'Schema version of this event/object using semantic versioning 2.0.0'
      default: 1.3.0
      
    School:
      type: object
      title: School
      x-tags:
        - School
      properties:
        schoolId:
          type: string
          description: digiDeliveryId of the school.
        schoolName:
          type: string
      required:
        - schoolId
        - schoolName
      x-examples:
        example-1:
          schoolId: '22461075-07BB-4A17-AB18-71B8455AA7A3'
          schoolName: SEMs excellent College
          
    Student:
      type: object
      x-tags:
        - Student
      title: Student
      description: Access to general student information.
      x-examples:
        example-1:
          eckId: '12345678'
          userId: 
            - userId: 123456776756@assas.edu.nl
              userIdType: nlPersonRealId
          schemaVersion: 1.3.0
          firstName: Jan
          surname: Jensen
          surnamePrefix: ''
          schoolperiod: 2021-2022
          school:
            schoolId: '123456'
            schoolName: SEMs excellent College
          class:
            classId: 34dcee7b-a8a5-42e6-a620-42ca8035d798
            className: VWO4a
          study:
            studyCode: 0170
            studyName: VWO-ATH prf Nat/Tech
            schoolStudyAbbr: ATH_N&T
            schoolStudyName: VWO Natuur en Techniek
            studyYear: 14
          schoolSubjects:
            - schoolSubjectId: 523194d6-e6b0-450c-ad3e-d5eda0396741
              startDate: '2019-08-24'
              endDate: '2019-08-24'
      properties:
        eckId:
          type: string
          description: |-
            The ECK iD of the student.
            (either eckId or userId is required)
        userId:
          type: array
          description: |-
            The User ID(s) of the student.
            (either eckId or userId is required)
          items:
            type: object
            properties:
              userId:
                type: string
              userIdType:
                type: string
                enum:
                  - nlPersonProfileId
                  - nlPersonRealId
                  - Las-key
                  - Leerlingnummer
            required:
              - userId
              - userIdType
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        firstName:
          type: string
        surname:
          type: string
        surnamePrefix:
          type: string
        schoolPeriod:
          type: string
          description: A reference to the school period for this student. (eg 2021-2021)
        school:
          $ref: '#/components/schemas/School'
        class:
          $ref: '#/components/schemas/Class'
        study:
          $ref: '#/components/schemas/Study'
        schoolSubjects:
          type: array
          items:
            type: object
            properties:
              schoolSubjectId:
                type: string
                format: uuid
                description: 'Identifier of a SchoolSubject'
              startDate:
                type: string
                format: date
                description: 'Student follows this subject from this date, format: YYYY-MM-DD (according to RFC3339)'
              endDate:
                type: string
                format: date
                description: 'Student follows this subject until (incl) this date, format: YYYY-MM-DD (according to RFC3339)'
            required:
              - schoolSubjectId
              - startDate
      required:
        - schemaVersion
        - firstName
        - surname
        - schoolPeriod
        - school
        - class
        - study
        
    Class:
      type: object
      x-tags:
        - Student
      x-examples:
        example-1:
          classId: 34dcee7b-a8a5-42e6-a620-42ca8035d798
          className: VWO4a
      title: Class
      description: 'A student is part of a class in a specific school (in Dutch: Stamklas). In addition a student follows subjects in groups (in Dutch: Lesgroep). These groups are exchanged as separate objects within the SIS API.'
      properties:
        classId:
          type: string
          format: uuid
          description: Unique identifier for a Class.
        className:
          type: string
          description: name of a Class.
      required:
        - classId
        - className
        
    Study:
      type: object
      x-tags:
        - Student
      x-examples:
        example-1:
          studyCode: 0170
          studyName: VWO-ATH prf Nat/Tech
          schoolStudyAbbr: ATH_N&T
          schoolStudyName: VWO Natuur en Techniek
          studyYear: 14
      title: Study
      description: |
        A Study to which a student is enrolled.
        
        Study can have the following values for studyYear:
        |studyYear|Name|Remarks|
        |---|---|---|
        |1| Primary Education (4 years old)| Apply to regular primary education |
        |2| Primary Education (5 years old)| Apply to regular primary education |
        |3-8| Primary Education learning years 3 until 8 | Apply to regular primary education |
        |S| S(B)O Speciaal (basis)onderwijs | Apply to special primary education |
        |11-16| Secondary Education learning years 1 until 6 | Apply to regular secondary education |
        |V| VSO Voortgezet Speciaal Onderwijs | Apply to special secondary education |
        |21-24| Vocational Education learning years 1 until 4 | Apply to vocational education |
      properties:
        studyCode:
          type: string
          description: 'Official code of the Study from the Ministry of OCW, see: https://zoek.officielebekendmakingen.nl/stcrt-2019-35044'
        studyName:
          type: string
          description: 'Official name of the study according to the column Korte Omschrijving in https://zoek.officielebekendmakingen.nl/stcrt-2019-35044'
        schoolStudyAbbr:
          type: string
          description: An abbreviation as chosen by the school.
        schoolStudyName:
          type: string
          description: Name of the Study as chosen by the school.
        studyYear:
          type: string
          enum:
            - '1'
            - '2'
            - '3'
            - '4'
            - '5'
            - '6'
            - '7'
            - '8'
            - 'S'
            - '11'
            - '12'
            - '13'
            - '14'
            - '15'
            - '16'
            - 'V'
            - '21'
            - '22'
            - '23'
            - '24'
      required:
        - studyCode
        - studyName
        - studyYear
        
    StudentReference:
      type: object
      x-tags:
        - Student
      title: Student reference
      properties:
        eckId:
          type: string
          description: |-
            The ECK iD of the student.
            (either eckId or userId is required)
        userId:
          type: array
          description: |-
            The User ID(s) of the student.
            (either eckId or userId is required)
          items:
            type: object
            properties:
              userId:
                type: string
              userIdType:
                type: string
                enum:
                  - nlPersonProfileId
                  - nlPersonRealId
                  - Las-key
                  - Leerlingnummer
            required:
              - userId
              - userIdType
              
    StudentDelivery:
      title: Student delivery
      type: object
      description: Access to delivery information for a student.
      x-tags:
        - StudentDelivery
      properties:
        eckId:
          type: string
          description: |-
            The ECK iD of the student.
            (either eckId or userId is required)
        userId:
          type: array
          description: |-
            The User ID(s) of the student.
            (either eckId or userId is required)
          items:
            type: object
            properties:
              userId:
                type: string
              userIdType:
                type: string
                enum:
                  - nlPersonProfileId
                  - nlPersonRealId
                  - Las-key
                  - Leerlingnummer
            required:
              - userId
              - userIdType
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        dateOfBirth:
          type: string
          format: date
          description: 'format: YYYY-MM-DD (according to RFC3339)'
        gender:
          type: string
          enum:
            - '0'
            - '1'
            - '2'
            - 'x'
            - '9'
          description: |- 
            '0: Unknown
             1: Male
             2: Female
             X: Gender neutral
             9: Unspecified'
        address:
          type: object
          properties:
            street:
              type: string
            houseNumber:
              type: string
              description: includes additions (e.g. 55-A)
            zipCode:
              type: string
            city:
              type: string
            countryCode:
              type: string
              description: According to Alpha-2 code from ISO 3166, e.g. NL
            country:
              type: string
          required:
            - street
            - houseNumber
            - zipCode
            - city
            - country
        emailSchool:
          type: string
          description: e-mail address hosted by school (e.g. L123456@sem.college.nl). One of emailSchool or emailPrivate must be present.
        emailPrivate:
          type: string
          description: private e-mail address of the student. One of emailSchool or emailPrivate must be present.
        emailParents:
          type: array
          items:
            type: object
            properties:
              emailParent:
                type: string
            required:
              - emailParent
      required:
        - schemaVersion
        - dateOfBirth
        - gender
        - address
        
    Teacher:
      type: object
      x-tags:
        - Teacher
      title: Teacher
      x-examples:
        example-1:
          userId: string
          schemaVersion: 0
          eckId: string
          firstname: string
          surname: string
          surnamePrefix: string
          schoolPeriod: 2021-2022
          school:
            schoolId: '123456'
            schoolName: SEMs excellent College
          groups:
            - groupId: string
              name: string
      properties:
        eckId:
          type: string
          description: |-
            The ECK iD of the teacher.
            (either eckId or userId is required)
        userId:
          type: array
          description: |-
            The User ID(s) of the teacher.
            (either eckId or userId is required)
          items:
            type: object
            properties:
              userId:
                type: string
              userIdType:
                type: string
                enum:
                  - nlPersonProfileId
                  - nlPersonRealId
                  - Las-key
                  - Medewerkernummer
            required:
              - userId
              - userIdType
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        firstName:
          type: string
        surname:
          type: string
        surnamePrefix:
          type: string
        schoolPeriod:
          type: string
          description: A reference to the school period for this teacher. (eg 2021-2021)
        school:
          $ref: '#/components/schemas/School'
      required:
        - schemaVersion
        - firstName
        - surname
        - schoolPeriod
        - school
        
    TeacherReference:
      type: object
      x-tags:
        - Teacher
      title: Teacher reference
      properties:
        eckId:
          type: string
          description: |-
            The ECK iD of the teacher.
            (either eckId or userId is required)
        userId:
          type: array
          description: |-
            The User ID(s) of the teacher.
            (either eckId or userId is required)
          items:
            type: object
            properties:
              userId:
                type: string
              userIdType:
                type: string
                enum:
                  - nlPersonProfileId
                  - nlPersonRealId
                  - Las-key
                  - Medewerkernummer
            required:
              - userId
              - userIdType
              
    Group:
      type: object
      x-tags:
        - Group
      x-examples:
        example-1:
          id: ae0119c7780f40b482f27ef7f3edc1e2
          schemaVersion: 0
          name: W2C MM
          school:
            id: '123456'
            name: SEMs excellent College
          students:
            - id: ''
              firstname: Kim
              surname: Abrahamjan
              surnamePrefix: de
          teachers:
            - id: 407b751eb2a44ad98ae3f7336c160fde
              firstname: Anja
              surname: Jong
              surnamePrefix: de
          subjects:
            - id: 65aad9b5acf74ab1a677095bb051fe91
              startDate: '2020-08-01'
              subjectCode: '0131'
              schoolSubjectName: Aardrijkskunde
              level: HAVO-2
              courseCode: W_HAVO
              courseYear: 2
          schoolYear: 2021-2022
      description: A group in which students follow a subject taught by teachers.
      title: Group
      properties:
        groupId:
          type: string
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        name:
          type: string
        schoolPeriod:
          type: string
          description: A reference to the school period for this group. (e.g. 2021-2022)
        school:
          $ref: '#/components/schemas/School'
        students:
          type: array
          items:
            $ref: '#/components/schemas/StudentReference'
        teachers:
          type: array
          items:
            $ref: '#/components/schemas/TeacherReference'
        subjects:
          type: array
          items:
            type: object
            properties:
              subjectCode:
                type: string
                description: 'Government standard subject code. Source: Ministerie van OCW, like https://zoek.officielebekendmakingen.nl/stcrt-2019-35044'
              schoolSubjectAbbr:
                type: string
                description: Abbreviation that the school gives to this subject (like 'en')
              schoolSubjectName:
                type: string
                description: Optional name of subject if different within specific school.
            required:
              - schoolSubjectAbbr
              - schoolSubjectName
      required:
        - groupId
        - schemaVersion
        - name
        - schoolPeriod
        - school
        - students
        - teachers
        
    SchoolSubject:
      type: object
      title: School subject
      x-tags:
        - SchoolSubject
      x-examples:
        example-1:
          schoolSubjectId: a50cf922-5bd6-419d-a50b-a39ac5e5b48f
          schemaVersion: 1.3.0
          subjectCode: '0071'
          schoolSubjectAbbr: en
          schoolSubjectName: Engels
          schoolLevel: 'VMBO-BB Onderbouw'
          levels:
            - level: VO-VMBO-BB
              levelYear: 1
            - level: VO-VMBO-BB
              levelyear: 2
      description: |
        The school subject is the combination of a subject, combined with the level of the study the subject is part of.
        For both the subject and the level, the official government codes and the code from the school are provided. In this way the teachers recognize their terminology, while the MP and LA can link this to the generic official codes.
         
      properties:
        schoolSubjectId:
          type: string
          format: uuid
          description: 'Meaningless uuid/guid chosen by the SIS'
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        subjectCode:
          type: string
          description: 'Government standard subject code. Source: Ministerie van OCW, like https://zoek.officielebekendmakingen.nl/stcrt-2019-35044'
        schoolSubjectAbbr:
          type: string
          description: Abbreviation that the school gives to this subject (like 'en')
        schoolSubjectName:
          type: string
          description: Optional name of subject if different within specific school.
        schoolLevel:
          type: string
          description: 'School name of the Level. example ''HAVO-2'',''Technasium-1'' This gives schools a way to name how they want it, while we still have a link with the official level'
        levels:
          type: array
          description: 'List of official levels this study and subject combination. could be multiple in case of schoollevel "Brugklas", "onderbouw", etc'
          items:
            type: object
            description: 'List of official levels this study and subject combination. could be multiple in case of schoollevel "Brugklas", "onderbouw", etc'
            properties:
              level:
                type: string
                description: |-
                  Official Level. 
                  Allowed values are: VO-PRO, VO-VMBO-BB, VO-VMBO-KB, VO-VMBO-GL, VO-VMBO-TL, VO-HAVO, VO-VWO 
                  As specified here: https://lod.onderwijsregistratie.nl/api/catalogus/v1/klasse?subject=http://lod.onderwijsregistratie.nl/cat/cdm/def/NiveauVO-v03.2'
                enum:
                  - BO
                  - SO
                  - SBO
                  - VO-PRO
                  - VO-VMBO-BB
                  - VO-VMBO-KB
                  - VO-VMBO-GL
                  - VO-VMBO-TL
                  - VO-HAVO
                  - VO-VWO
                  - VSO
                  - MBO-Niveau-1
                  - MBO-Niveau-2
                  - MBO-Niveau-3
                  - MBO-Niveau-4
              levelYear:
                type: integer
                description: Learning year (eg 1)
            required:
              - level
              - levelYear
      required:
        - schoolSubjectId
        - schemaVersion
        - schoolSubjectAbbr
        - schoolSubjectName
        - schoolLevel
        
    SchoolPeriod:
      title: School period
      type: object
      x-tags:
        - SchoolPeriod
      description: |-
        A school period is the timed scope where students, teachers, subjects and groups are exchanged.
        For each school period students and teachers are exchanged. In this way we can exchange information for a next year while the current period is still active. 

        Most of the times a school period is equivalent of a school year. eg 2021-2022. In some situations a school period could be a half year period or a 2 year period. The SIS will exchange the periods for reference. 

        A SIS can choose not to send events about students/teachers for the next schoolyear until that period is started. The list of SchoolSubjects should be available well before the start of a new period, so MP and LA's can prepare for that period. 
      x-examples:
        example-1:
          name: 2021-2022
          schemaVersion: 1.3.0
          start: '2021-08-01'
          end: '2022-07-31'
      properties:
        name:
          type: string
          description: Description of school period (eg 2021-2022 or 2022H1)
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        start:
          type: string
          format: date
          description: 'Start of the school period, format: YYYY-MM-DD (according to RFC3339)'
        end:
          type: string
          format: date
          description: 'End of the school period, format: YYYY-MM-DD (according to RFC3339)'
      required:
        - name
        - schemaVersion
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.example.com/oauth2/token
          refreshUrl: https://api.example.com/oauth2/token
          scopes:
            sis.student-delivery: 'a scope that gives access to student delivery information including address'
            sis.student-teacher-group: 'a scope that gives access to student, teacher and group data'
            sis.school: 'A scope that allows access to the basic school information: periods and subjects'
            
paths:
  /students/:
    post:
      summary: Search Student by ID
      x-tags:
        - Student
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                studentReference:
                  $ref: '#/components/schemas/StudentReference'
                schoolPeriod:
                  type: string
                  description: Optional, defaults to current school period.
                schemaVersion:
                  type: string
                  description: Optional parameter to request a response in a specific schema version. If none supplied, the server will choose its default schema version. See the Events API for a call to get the default schema version.
              required:
                - studentReference
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized - No valid token presented
        '403':
          description: Forbidden - No consent given to access the requested resource
        '404':
          description: Not Found
      operationId: get-student-by-id
      description: 'Retrieve basic student information, including their class, study and subject choices.'
      security:
        - OAuth2:
            - sis.student-teacher-group
  
  /students/delivery-information:
    post:
      summary: Search Student delivery information by ID
      x-tags:
        - StudentDelivery
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                studentReference:
                  $ref: '#/components/schemas/StudentReference'
                schoolPeriod:
                  type: string
                  description: Optional, defaults to current school period.
                schemaVersion:
                  type: string
                  description: Optional parameter to request a response in a specific schema version. If none supplied, the server will choose its default schema version. See the Events API for a call to get the default schema version.
              required:
                - studentReference
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDelivery'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized - No valid token presented
        '403':
          description: Forbidden - No consent given to access the requested resource
        '404':
          description: Not Found
      operationId: get-student-delivery-information-by-id
      description: Retrieve delivery information by ID - this entity is only available to a specific scope.
      security:
        - OAuth2:
            - sis.student-delivery
            
  /teachers:
    post:
      summary: Search Teacher by ID
      x-tags:
        - Teacher
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                teacherReference:
                  $ref: '#/components/schemas/TeacherReference'
                schoolPeriod:
                  type: string
                  description: Optional, defaults to current school period.
                schemaVersion:
                  type: string
                  description: Optional parameter to request a response in a specific schema version. If none supplied, the server will choose its default schema version. See the Events API for a call to get the default schema version.
              required:
                - teacherReference
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized - No valid token presented
        '403':
          description: Forbidden - No consent given to access the requested resource
        '404':
          description: Not Found
      operationId: get-teacher-by-id
      security:
        - OAuth2:
            - sis.student-teacher-group
      description: 'Retrieve basic teacher information'
      
  /groups/{id}:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
      - schema:
          type: string
        name: schemaVersion
        in: query
        required: false
        description: optional parameter to request a response in a specific schema version. If none supplied, the server will choose its default schema version. See the Events API for a call to get the default schema version.
    get:
      summary: Get group by ID
      x-tags:
        - Group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized - No valid token presented
        '403':
          description: Forbidden - No consent given to access the requested resource
        '404':
          description: Not Found
      operationId: get-group-by-id
      description: |-
        Retrieve information about a specific group by ID, this includes the teachers, students and subjects taught in the group.
      security:
        - OAuth2:
            - sis.student-teacher-group
            
  /schoolsubjects:
    parameters:
      - schema:
          type: string
        name: schemaVersion
        in: query
        required: false
        description: optional parameter to request a response in a specific schema version. If none supplied, the server will choose its default schema version. See the Events API for a call to get the default schema version.
      - schema:
          type: string
        in: query
        name: schoolPeriod
        description: request the list of school subjects for a particular school period (eg 2021-2022)
    get:
      summary: Get SchoolSubjects
      x-tags:
        - SchoolSubject
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchoolSubject'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized - No valid token presented
        '403':
          description: Forbidden - No consent given to access the requested resource
      operationId: get-schoolsubjects-schoolyear
      security:
        - OAuth2:
            - sis.school
      description: Get possible school subject for next schoolyears. Used to create LML lists in MP while exact student-subject relation is not yet available
      
  /schoolsubjects/{id}:
    parameters:
      - schema:
          type: string
        name: schemaVersion
        in: query
        required: false
        description: optional parameter to request a response in a specific schema version. If none supplied, the server will choose its default schema version. See the Events API for a call to get the default schema version.
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: id of the requested resource.
    get:
      summary: Get SchoolSubject by ID
      x-tags:
        - SchoolSubject
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolSubject'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized - No valid token presented
        '403':
          description: Forbidden - No consent given to access the requested resource
        '404':
          description: Not Found
      operationId: get-schoolsubject-by-id
      security:
        - OAuth2:
            - sis.school
      description: Get possible school subject for next schoolyears. Used to create LML lists in MP while exact student-subject relation is not yet available
      
  /schoolperiods:
    parameters:
      - schema:
          type: string
        name: schemaVersion
        in: query
        required: false
        description: optional parameter to request a response in a specific schema version. If none supplied, the server will choose its default schema version. See the Events API for a call to get the default schema version.
    get:
      summary: Get SchoolPeriods
      x-tags:
        - SchoolPeriod
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchoolPeriod'
              examples:
                example-1:
                  value:
                    - name: 2021-2022
                      start: '2021-08-01'
                      end: '2022-07-31'
                    - name: 2022-2023
                      start: '2022-08-01'
                      end: '2023-07-31'
        '400':
          description: Bad Request - invalid schema version requested
        '401':
          description: Unauthorized - No valid token presented
        '403':
          description: Forbidden - No consent given to access the requested resource
      operationId: get-schoolperiods
      description: |-
        Retrieve a list of current and upcoming school periods. 
        How many periods are given in advance is up to the SIS implementation. Only the next period makes sense at this point

        Usually start and stop dates op periods are adjacent, but start and stop dates can overlap in special situations.
      security:
        - OAuth2:
            - sis.school
x-tags:
  - name: School
  - name: Student
  - name: StudentDelivery
  - name: Teacher
  - name: Group
  - name: SchoolSubject
  - name: SchoolPeriod

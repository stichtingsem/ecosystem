openapi: 3.0.0
info:
  title: Student Information System API
  version: '1.0'
  description: |
    This is an API provided by the SIS in the SEM ecosystem, and is designed to enable a SIS to make the core information about teachers, learners, subjects and groups available to the rest of the ecosystem in a security and privacy cocnious way.
    Note: At this moment Groups are defined, but not yet in scope. First we will see if we need groups at all or that they are deducted from the list of groups from students and teachers.

    # Events

    It is envisaged that the service implementing this API, also implements the generic [Events](https://stichtingsem.stoplight.io/docs/sem-technology-prototype/reference/events.v1.yaml) and [Webhooks](https://stichtingsem.stoplight.io/docs/sem-technology-prototype/reference/webhooks.v1.yaml) API to enable subscription to changes vs polling.

    Events generated by the SIS API are connected to state changes for key entities:

     - `sis.student` - A student has been created or modified   
     - `sis.student-delivery` - A students delivery information has been created or modified     
     - `sis.teacher` - A teacher has been created or modified
     - `sis.group` - A group has been modified (this is an aggregate event) - this means that basic metadata changed, a student added/removed, a teacher added or removed or a subject choice modified within a group. Not yet implemented.     
     
    Events about students, teachers and groups is scoped per schoolyear. Each year a new set of events is generated. A recieving system (LMS/LA/MP) should check if the events are for the current year or already for the next year.

    # Privacy and Scopes
     
    Data from the SIS can be sensitive, and the events and APIs available to a requesting service depend on the scopes requested and approved during setup.  The following scopes exist for the SIS, and map to the following entities and attributes:

    `sis.student-teacher-group` - 
    This scope enables a requestor to get basic information about a user (student or teacher) to enable that platform to present appropriate information or a basic profile for them and understand what groups or subjects they are enrolled in or teach.

    `sis.school` - 
    This scope enables a requestor to get basic information about school: periods and schoolsubjects in that period

    ### Event Access

    |Events|Event Data|Rationale|
    |------|---------|----|
    |sis.student|id, eckId, name, school, groups, subjects|To enable the requesting service to maintain a copy of basic (non-PII) student profile information|
    |sis.teacher|id, eckId, name, school, groups|To enable the requesting service to maintain a copy of basic (non-PII) teacher information|
    |sis.group|id, name, school, students, teachers, and subjects|To enable the requesting service to maintain a copy group information|

    ### Data Visibility

    |Entity|Fields|Rationale|
    |------|---------|-----|
    |Student|id, eckId, name, school, groups, subjects|To enable the requesting service to maintain a copy of basic (non-PII) student profile information|
    |Teacher|id, eckId, name, school, groups|To enable the requesting service to maintain a copy of basic (non-PII) teacher information|

    `sis.student-teacher-delivery`

    This scope enables a requestor to get additional information required to support the physical delivery of books or other material directly to an individual.  This exchange includes PII, and would be requested in addition the basic `sis.student-teacher-group` scope, so the following should be read as additive to that scope.

    We have a principle to never send PII in events or store in an event log, so this event is only a notification.  The subscribing system must call back to retrieve the information.
     

    ### Event Access

    |Events|Event Data|Rationale|
    |------|---------|---|
    |sis.student-delivery|id, eckId|This is a notification only, as there should be no PII sent in events - only accessed by API calls.|

    ### Data Visibility

    |Entity|Fields|Rationale|
    |------|---------|-----|
    |Student Delivery|dateOfBirth, emailAddress, postcode, houseNumber, firstname, surname, tussenvoegsel|To enable the requesting service to maintain a copy of contact and delivery information|
  contact:
    name: SEM
    url: 'https://stichtingsem.org/'
servers:
  - url: 'https://example.stichtingsem.org/api'
    description: sisdata
components:
  schemas:
    School:
      type: object
      title: School
      x-tags:
        - school
      properties:
        schoolId:
          type: string
        schoolName:
          type: string
      required:
        - schoolId
        - schoolName
      x-examples:
        example-1:
          schoolId: '123456'
          schoolName: SEMs excelent College
    Student:
      type: object
      x-tags:
        - student
      title: Student
      description: Access to non-sensitive student information for us in an LMS or LA.
      x-examples:
        example-1:
          userId: 123456776756@assas.edu.nl
          schemaVersion: 0
          eckId: '12345678'
          firstname: Jan
          surname: Jensen
          surnamePrefix: ''
          schoolperiod: 2021-2022
          school:
            schoolId: '123456'
            schoolName: SEMs excelent College
          groups:
            - groupId: vm-bb-2a
              name: vmbo 2a
          schoolSubjects:
            - startDate: '2019-08-24'
              endDate: '2019-08-24'
              subject:
                subjectCode: '0071'
                schoolSubjectCode: en
                schoolSubjectName: Engels
                levels:
                  - level: HAVO
                    levelYear: 1
                  - level: VWO
                    levelYear: 1
                schoolLevelCode: onderbouw-2
                schemaVersion: 0
      properties:
        userId:
          type: string
          description: userid. (nledupersonrealId or nledupersonprofileId)
        schemaVersion:
          type: integer
          description: 'schema version of this event/object. Start with 0, inclement when we have changes, so we know how to deserialise.'
        eckId:
          type: string
          description: |-
            the ECK-ID of the individual.
            (either eckId or userId is required)
        firstname:
          type: string
        surname:
          type: string
        surnamePrefix:
          type: string
        schoolPeriod:
          type: string
          description: A reference to the school period for this student. (eg 2021-2021)
        school:
          $ref: '#/components/schemas/School'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupReference'
        schoolSubjects:
          type: array
          items:
            type: object
            properties:
              schoolSubject:
                $ref: '#/components/schemas/SchoolSubject'
              startDate:
                type: string
                format: date
                description: 'Start of this subject for the student. (full-date format  RFC3339 https://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14])'
              endDate:
                type: string
                format: date
                description: |-
                  Start of this subject for the student.
                  (full-date format  RFC3339 https://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14]). null if not ended
            required:
              - schoolSubject
              - startDate
      required:
        - firstname
        - surname
        - schoolPeriod
        - school
    StudentReference:
      type: object
      x-tags:
        - student
      title: Student reference
      description: Access to non-sensitive student information for us in an LMS or LA.
      properties:
        userId:
          type: string
          description: userid. (nledupersonrealId or nledupersonprofileId)
        eckId:
          type: string
          description: |-
            the ECK-ID of the individual.
            (either eckId or userId is required)
        firstname:
          type: string
        surname:
          type: string
        surnamePrefix:
          type: string
      required:
        - firstname
        - surname
    Teacher:
      type: object
      x-tags:
        - teacher
      title: Teacher
      x-examples:
        example-1:
          userId: string
          schemaVersion: 0
          eckId: string
          firstname: string
          surname: string
          surnamePrefix: string
          schoolPeriod: 2021-2022
          school:
            schoolId: '123456'
            schoolName: SEMs excelent College
          groups:
            - groupId: string
              name: string
      properties:
        userId:
          type: string
          description: userid. (nledupersonrealId or nledupersonprofileId)
        schemaVersion:
          type: integer
          description: 'schema version of this event/object. Start with 0, inclement when we have changes, so we know how to deserialise.'
        eckId:
          type: string
          description: |-
            the ECK-ID of the individual.
            (either eckId or userId is required)
        firstname:
          type: string
        surname:
          type: string
        surnamePrefix:
          type: string
        schoolPeriod:
          type: string
          description: A reference to the school period for this teacher. (eg 2021-2022)
        school:
          $ref: '#/components/schemas/School'
        groups:
          type: array
          description: |
            Do we need this? This information is already available in groups. It will not be available in the beginning of the school year when the rosters are not complete. Neither LMS or LA need it to function.
          items:
            $ref: '#/components/schemas/GroupReference'
      required:
        - firstname
        - surname
        - schoolPeriod
        - school
    TeacherReference:
      type: object
      x-tags:
        - teacher
      title: Teacher reference
      properties:
        userId:
          type: string
          description: userid. (nledupersonrealId or nledupersonprofileId)
        eckId:
          type: string
          description: |-
            the ECK-ID of the individual.
            (either eckId or userId is required)
        firstname:
          type: string
        surname:
          type: string
        surnamePrefix:
          type: string
      required:
        - firstname
        - surname
    Group:
      type: object
      x-examples:
        example-1:
          id: ae0119c7780f40b482f27ef7f3edc1e2
          schemaVersion: 0
          name: W2C MM
          school:
            id: '123456'
            name: SEMs excelent College
          students:
            - id: ''
              firstname: Kim
              surname: Abrahamjan
              surnamePrefix: de
          teachers:
            - id: 407b751eb2a44ad98ae3f7336c160fde
              firstname: Anja
              surname: Jong
              surnamePrefix: de
          subjects:
            - id: 65aad9b5acf74ab1a677095bb051fe91
              startDate: '2020-08-01'
              subjectCode: '0131'
              schoolSubjectName: Aardrijkskunde
              level: HAVO-2
              courseCode: W_HAVO
              courseYear: 2
          schoolYear: 2021-2022
      x-tags:
        - group
      description: A group or other grouping of students.
      title: Group
      properties:
        groupId:
          type: string
        schemaVersion:
          type: integer
          description: 'schema version of this event/object. Start with 0, inclement when we have changes, so we know how to deserialise.'
          default: 0
        name:
          type: string
        school:
          $ref: '#/components/schemas/School'
        students:
          type: array
          items:
            $ref: '#/components/schemas/StudentReference'
        teachers:
          type: array
          items:
            $ref: '#/components/schemas/TeacherReference'
        subjects:
          type: array
          items:
            $ref: '#/components/schemas/SchoolSubject'
        schoolPeriod:
          type: string
          description: A reference to the school period for this group. (ex 2021-2022)
      required:
        - groupId
        - name
        - school
    GroupReference:
      type: object
      x-examples: {}
      x-tags:
        - group
      description: ''
      properties:
        groupId:
          type: string
        name:
          type: string
      required:
        - groupId
        - name
      title: Group reference
    SchoolSubject:
      type: object
      title: SchoolSubject
      x-tags:
        - schoolsubject
      x-examples:
        example-1:
          id: a50cf922-5bd6-419d-a50b-a39ac5e5b48f
          subjectCode: '0071'
          schoolSubjectCode: en
          schoolSubjectName: Engels
          levels:
            - level: VO-VMBO-BB
              levelYear: 2
          schoolLevel: onderbouw-2
      description: |
        The school subject is the combination of a subject, combined with the level of the study the subject is part of.
        For both the subject and the level, the official government codes and the code from the school are provided. In this way the teachers recognise their teminology, while the MP and LA can link this to the generic official codes.
         
      properties:
        id:
          type: string
          description: 'SchoolsubjectId: Meaningless uuid/guid chosen by the SIS'
        subjectCode:
          type: string
          description: 'Government standard subject code. bron: Ministerie van OCW, like https://zoek.officielebekendmakingen.nl/stcrt-2019-35044'
        schoolSubjectAbbr:
          type: string
          description: Abbreviation that the school gives to this subject (like 'en')
        schoolSubjectName:
          type: string
          description: Optional name of subject if different within specific school.
        schoolLevel:
          type: string
          description: 'School name of the Level. example ''HAVO-2'',''Technasium-1'' This gives schools a way to name how they want it, while we still have a link with the official level'
        levels:
          type: array
          description: 'List of official levels this study and subject combination. could be multiple in case of schoollevel "Brugklas", "onderbouw", etc'
          items:
            type: object
            description: 'List of official levels this study and subject combination. could be multiple in case of schoollevel "Brugklas", "onderbouw", etc'
            properties:
              level:
                type: string
                description: |-
                  Official Level. 
                  Allowed values are: VO-PRO, VO-VMBO-BB, VO-VMBO-KB, VO-VMBO-GL, VO-VMBO-TL, VO-HAVO, VO-VWO 
                  As specified here: https://lod.onderwijsregistratie.nl/api/catalogus/v1/klasse?subject=http://lod.onderwijsregistratie.nl/cat/cdm/def/NiveauVO-v03.2'
              levelYear:
                type: integer
                description: Learning year (eg 1)
            required:
              - level
              - levelYear
      required:
        - id
        - schoolSubjectAbbr
        - schoolSubjectName
        - schoolLevel
    StudentDelivery:
      title: Student delivery
      type: object
      description: Access to sensitive delivery information for a student.
      x-tags:
        - student
      properties:
        userId:
          type: string
          description: userid. (nledupersonrealId or nledupersonprofileId)
        schemaVersion:
          type: integer
          description: 'schema version of this event/object. Start with 0, inclement when we have changes, so we know how to deserialise.'
        eckid:
          type: string
        dateOfBirth:
          type: string
          format: date
          description: (ISO8601)
        emailAddress:
          type: string
        zipcode:
          type: string
        street:
          type: string
        houseNumber:
          type: string
        city:
          type: string
        country:
          type: string
        firstname:
          type: string
          description: |
            Used for delivery
        surname:
          type: string
          description: |
            Used for delivery
        surnamePrefix:
          type: string
          description: Used for delivery
      required:
        - userId
        - eckid
        - dateOfBirth
        - emailAddress
        - zipcode
        - street
        - houseNumber
        - city
        - country
        - firstname
        - surname
    SchoolPeriod:
      title: SchoolPeriod
      type: object
      x-tags:
        - student
      description: |-
        A school period is the timed scope where students, teachers, subjects and groups are exchanged.
        For each school period students and teachers are exchanged. In this way we can exchange information for a next year while the current period is still active. 

        Most of the times a schoolperiod is equavalant of a school year. eg 2021-2022. In some situations a school period could be a half year period or a 2 year period. The SIS will exchange the periods for reference. 

        A SIS can choose not to send events about students/teachers for the next schoolyear until that period is started. The list of SchoolSubjects should be available well before the start of a new period, so MP and LA's can prepare for that period. 
      x-examples:
        example-1:
          name: 2021-2022
          start: '2021-08-01'
          end: '2022-07-31'
      properties:
        name:
          type: string
          description: Description of school period (eg 2021-2022 or 2022H1)
        schemaVersion:
          type: integer
          description: 'schema version of this event/object. Start with 0, inclement when we have changes, so we know how to deserialise.'
        start:
          type: string
          description: 'Start of the period (full-date format  RFC3339 https://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14])'
          format: date
        end:
          type: string
          format: date
          description: 'end of the schoolperiod (full-date format  RFC3339 https://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14])'
      required:
        - name
  securitySchemes:
    APIKey:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: ''
          refreshUrl: ''
          scopes:
            sis.student-delivery: a scope that gives access to sensitive student information like adress
            sis.student-teacher-group: 'a scope that gives access to student, teacher and group data'
            sis.school: 'A scope that allows access to the basic school information : periodes and schoolsubjects in those periods'
paths:
  '/student/{id}':
    parameters:
      - schema:
          type: string
        name: id
        description: 'UUID chosen by the SIS to refer to a student. This identifier is only published by the SIS as part of the url sent in an earlier event about this student. This identifier is only to be used within the context of requestparameter for this resource, not as a broader identifier of the student.'
        in: path
        required: true
    get:
      summary: Get Student by ID
      x-tags:
        - student
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
              examples:
                example-1:
                  value:
                    userId: string
                    schemaVersion: 0
                    eckId: string
                    firstname: string
                    surname: string
                    surnamePrefix: string
                    schoolPeriod: string
                    school:
                      schoolId: string
                      schoolName: string
                    groups:
                      - groupId: string
                        name: string
                    schoolSubjects:
                      - schoolSubject:
                          id: string
                          subjectCode: string
                          schoolSubjectAbbr: string
                          schoolSubjectName: string
                          schoolLevel: string
                          levels:
                            - level: string
                              levelYear: 0
                        startDate: '2019-08-24'
                        endDate: '2019-08-24'
      operationId: get-student-id
      description: 'Retrieve basic student information, including their groups and subject choices.'
      security:
        - APIKey:
            - sis.student-teacher-group
      parameters:
        - schema:
            type: string
          in: query
          name: schoolPeriod
          description: 'Request data for this student about a specific school period, if not provided, default to current.'
  '/teacher/{id}':
    parameters:
      - schema:
          type: string
        name: id
        description: 'UUID chosen by the SIS to refer to a teacher. This identifier is only published by the SIS as part of the url sent in an earlier event about this teacher. This identifier is only to be used within the context of requestparameter for this resource, not as a broader identifier of the teacher.'
        in: path
        required: true
    get:
      summary: Get Teacher by ID
      x-tags:
        - teacher
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
      operationId: get-teacher-id
      security:
        - APIKey:
            - sis.student-teacher-group
      description: 'Retrieve basic teacher information including the groups they teach.  '
      parameters:
        - schema:
            type: string
          in: query
          name: schoolPeriod
          description: 'Request data for this teacher about a specific school period, if not provided, default to current.'
  '/group/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get group by ID
      x-tags:
        - group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      operationId: get-group-id
      description: |-
        Retrieve information about a specific group by ID, this includes the teachers, students and their subject choices.

        Note: This is defined but not yet implemented. Fisrt we will see if we can do with as we get the group information via students and teachers. Adding groups would duplicate events.
      security:
        - APIKey:
            - sis.student-teacher-group
      parameters:
        - schema:
            type: string
          in: query
          name: schoolPeriod
          description: 'Request data for this group about a specific school period, if not provided, default to current.'
  '/student/{id}/delivery-information':
    parameters:
      - schema:
          type: string
        name: id
        description: 'UUID chosen by the SIS to refer to a student. This identifier is only published by the SIS as part of the url sent in an earlier event about this student. This identifier is only to be used within the context of requestparameter for this resource, not as a broader identifier of the student.'
        in: path
        required: true
    get:
      summary: Get Student delivery information by ID
      x-tags:
        - student
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDelivery'
      operationId: get-student-id-delivery-information
      description: Retrieve privacy sensitive delivery information by ID - this entity is only available to a specific scope.
      security:
        - APIKey:
            - sis.student-delivery
  /schoolsubjects:
    parameters: []
    get:
      summary: GET School Subjects for next years
      x-tags:
        - schoolsubject
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchoolSubject'
      operationId: get-schoolsubjects-schoolyear
      security:
        - APIKey:
            - sis.school
      description: Get possible school subject for next schoolyears. Used to create LML lists in MP while exact student-subject relation is not yet available
      parameters:
        - schema:
            type: string
          in: query
          name: schoolPeriod
          description: request this list of schoolsubjects for a particular school period (eg 2021-2022)
  /schoolperiods:
    get:
      summary: Get SchoolPeriods
      x-tags:
        - schoolperiod
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchoolPeriod'
              examples:
                example-1:
                  value:
                    - name: 2021-2022
                      start: '2021-08-01'
                      end: '2022-07-31'
                    - name: 2022-2023
                      start: '2022-08-01'
                      end: '2023-07-31'
      operationId: get-schoolperiods
      description: |-
        Retrieve a list of current and upcomming school periods. 
        How many periods are given in advance is up to the SIS implementation. Only the next period makes sense at this point

        Usually start and stop dates op periods are adjacent, but start and stop dates can overlap in special situations. (not to be expected in POC 2)
      security:
        - APIKey:
            - sis.school
x-tags:
  - name: group
  - name: student
  - name: teacher
  - name: schoolsubject
  - name: schoolperiod

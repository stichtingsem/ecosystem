openapi: 3.0.0
servers:
  - url: 'https://example.stichtingsem.org/api'
info:
  description: |-
    NOTE : THE WEBHOOK API IS PROBABLY DEPRECATED/OBSOLETE.
    An alternative for POC2: have the events endpoint fixed per party, just like the other endpoints. When consent is given the events are send automaticly to the endpoint.



    The proposed architecture for the new ecosystem is based on an Event model, where each provider of data to the ecosystem provides a mechanism for other participants to securely subscribe to events that are of interest to them.

    The Webhook API is the mechanism, in conjunction with the Event API, that enables this event based notification mechanism to function reliably.  It enables subscribers to create a webhook registration with the provider, so that the provider can send a POST to the provided URL when an event occurs.

    This forms the 'near real time' element of the architecture, and enables subscribers to retrieve information on all changes immediately, while still retaining full control of when that data will be subsequently processed.

    The registerd url is the events API endpoint which implemented the POST /event and /events path.

    Notes:
      - Ideally you would have one webhook registration per subscriber, but we should allow for multiple events that then need to be discarded.
      - Event filters should automatically be applied aligned with oauth scopes in place for the subscriber - e.g. don't allow events to go to a subscriber for entities that they are not allowed to access.
        This restriction will be defined in the API specification for each service. 
        

    ## Scopes 
    The webhook API uses a scopes to call webhook request
    `sem.webhook` - scope that allows the a party to call the webhook API
  version: 1.0.0
  title: Generic Web Hook API
  contact:
    email: clifton@infinitaslearning.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
x-tags:
  - name: webhooks
    description: Operations related to webhook management
paths:
  /webhook:
    get:
      x-tags:
        - webhooks
      summary: Retrieve list of webhooks
      description: retrieves list of webhooks registered
      operationId: listWebhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks'
      security:
        - APIKey:
            - sem.webhooks
    post:
      x-tags:
        - webhooks
      description: creates or updates a webhook
      operationId: createUpdateWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook'
      responses:
        '200':
          description: |-
            OK, the request is processed 

            status - Message
            0 - All fine
            1 - webhook already exists
            2 - webhook already exists for this school
            x - <to be defined>

            99- Other, see statusMessage for details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  statusMessage:
                    type: string
                  webhook:
                    $ref: '#/components/schemas/webhook'
      summary: Create or update webhook
      security:
        - APIKey:
            - sem.webhooks
  '/webhook/{webhookId}':
    get:
      x-tags:
        - webhooks
      summary: Retrieve webhook by ID
      description: retrieves specific of webhook
      operationId: getWebhook
      parameters:
        - name: webhookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
      security:
        - APIKey:
            - sem.webhooks
    delete:
      x-tags:
        - webhooks
      description: deletes a webhook
      operationId: deleteWebhook
      parameters:
        - name: webhookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
      summary: Delete a webhook
      security:
        - APIKey:
            - sem.webhooks
components:
  schemas:
    webhooks:
      type: array
      items:
        $ref: '#/components/schemas/webhook'
      x-tags:
        - webhooks
      title: Webhooks
    webhook:
      type: object
      x-tags:
        - webhooks
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        schemaVersion:
          type: integer
          description: 'schema version of this event/object. Start with 0, inclement when we have changes, so we know how to deserialise.'
        url:
          type: string
          description: The url that will be called when any of the subscribed events occur
          example: 'http://lms.nl/api/webhook'
        enabled_events:
          type: array
          description: Allow filtering of events that should be sent to this endpoint
          example:
            - 'la:usage'
            - 'la:results'
          items:
            type: string
      required:
        - id
        - url
        - enabled_events
      title: Webhook
      description: Definition of a webhook. The school identity is part of the auth token
  securitySchemes:
    APIKey:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: ''
          refreshUrl: ''
          scopes:
            sem.webhooks: ''
      description: ''

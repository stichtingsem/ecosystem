openapi: 3.0.0
servers:
  - url: 'https://example.stichtingsem.org/api'
info:
  version: 1.3.0
  title: Consent API
  description: |
    When two parties agree to exchange data, they will define their roles and with this a list of scopes will be defined and saved alongside the client credentials.

    Consent always has to be given at both parties that are involved. For example: both in the SIS and in the MP a user with the access role to allow data sharing (ie. security officer) has to give consent before the SIS can share their data with the MP (or other roles). The consent API is used to inform the other party of a new or updated consent registration about a specified school and api.

    The complete consent consists of 2 statuses: `producerStatus` and `consumerStatus`. Both parties will have their own identification. The producerStatus is from the producer of the API (i.e. the party in the role of SIS for providing the SIS API) and the consumerStatus is from the consumer of the API (i.e. the party in the role of MP, LA or LMS for consuming the SIS API). Both parties can request the status of the api from the other party for support purpose.

    A consent is given for an API and for a specified school. The school is specified with a `schoolIdentifier` and has the format of a digiDeliveryId (case sensitive).

    Consent can be pending, accepted, denied or revoked. This status change is send to the other party to stop sending data and show in the UI that the other party has no longer consent and that data exchange halted.

    When both parties have given consent, or re-given consent, the Consumer can request the producer to handle the initial seed: send all relevant events needed to get up-to-date. For a LA that could mean sending all products, for a SIS sending all students and teachers of the current schoolyear once as event. The initial seed endpoint is part of the Events API.
    
    After the initial seed has been triggered, the Consumer can be subscribed to future updates on the API and can receive Events when objects are created, modified or deleted.

    In the documentation the Consent mechanism is explained in chapter `Architectuur en Security`, paragraph `Security en Privacy`.

    ## Events
    The Consent API uses no Events. 

    ## Scopes 
    The Consent API uses a scopes to call consent request
    `sem.consent` - scope that allows a party to call the Consent API
        
  contact:
    name: Stichting SEM
    url: 'https://stichtingsem.org/'

components:
  schemas:
    
    schemaVersion:
      type: string
      description: 'Schema version of this event/object using semantic versioning 2.0.0'
      default: 1.3.0
    
    Consent:
      type: object
      x-tags:
        - Consent
      description: |
        A model that describes the consent between 2 parties. It contains 2 id's and 2 statuses and is valid for an API for a school.

        In the consent a Producer and Consumer are referenced. These are the Producer and Consumer of the API. For example for the SIS API, a party in the role of SIS providing the SIS API is the Producer and a party in the role of MP, LA or LMS is the Consumer.
      title: Consent
      properties:
        producerReferenceId:
          type: string
          description: 'Unique reference Id of this consent, as generated by the producer of the API. Example: SIS is producer of SIS-data and therefore always the producer in sis-api consent.'
        consumerReferenceId:
          type: string
          description: 'Unique reference Id of this consent, as generated by the consumer of the API. Example: MP, LA, and LMS are consumers of SIS-data. Party that is offering one of these roles is the consumer in the sis-api consent.'
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        schoolIdentifier:
          type: string
          description: 'The School for which consent is requested or registered. Format: digiDeliveryID, case sensitive.'
        api:
          type: string
          description: 'The API for which consent is requested or registered.'
          enum:
            - usage-api
            - progress-api
            - results-api
            - entitlement-api
            - sis-api
        producerStatus:
          type: string
          description: 'The current status of the consent for the api and school, on the Producer side.'
          enum:
            - pending
            - accepted
            - declined
            - revoked
        consumerStatus:
          type: string
          description: 'The current status of the consent for the api and school, on the Consumer side.'
          enum:
            - pending
            - accepted
            - declined
            - revoked
      required:
        - producerReferenceId
        - consumerReferenceId
        - schemaVersion
        - schoolIdentifier
        - api
        - producerStatus
        - consumerStatus
    
    ConsentUpdate:
      type: object
      x-tags:
        - Consent
      description: 'A model that describes the consent update from one party to another. Could be the first update, so the receiving party can check if it already has a consent for this API for this school from this client.'
      title: ConsentUpdate
      properties:
        referenceId:
          type: string
          description: 'Unique identifier generated by the party at which the the new consent status has been registered. This is in practice the party that calls the consent update endpoint.'
        schemaVersion:
          $ref: '#/components/schemas/schemaVersion'
        schoolIdentifier:
          type: string
          description: 'The School for which consent is registered. Format: digiDeliveryID, case sensitive.'
        api:
          type: string
          description: 'The API for which consent is registered.'
          enum:
            - usage-api
            - progress-api
            - results-api
            - entitlement-api
            - sis-api
        newStatus:
          type: string
          description: 'The new status of the consent registered for the requesting party, school and api.'
          enum:
            - accepted
            - declined
            - revoked
      required:
        - referenceId
        - schoolIdentifier
        - api
        - newStatus
  
    ConsentRegistration:
      type: object
      x-tags:
        - Consent
      description: 'As a reply to a consent update a status code and status message is given. In case the consent is processed correctly, also the most actual status of the consent is given back as part of the reply.'
      title: ConsentRegistration
      properties:
        status:
          type: string
          description: 'See functional status codes within the Documentation.'
          example: 0
        statusMessage:
          type: string
          description: 'See functional status messages within the Documentation.'
          example: 'OK'
        consent:
          $ref: '#/components/schemas/Consent'
      required:
        - status    

  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.example.com/oauth2/token
          refreshUrl: https://api.example.com/oauth2/token
          scopes:
            sem.consent: 'scope that allows a party to call the Consent API.'

paths:
  
  /consentupdate:
    post:
      summary: Post Inform Consent Update
      x-tags:
        - Consent
      description: |
        Allows a party to inform another party of a new (or status change) of a consent for a (new) school (digiDeliveryID) and a specified api.

        Example: An Administrator updated the consent at a party in the role of MP for the SIS API. The party in the MP role calls this endpoint at the party in the SIS role and includes a ConsentUpdate. The party in the SIS role replies with a ConsentRegistration.
        
        This does not imply that Consent is active between both parties. First the Administrator also has to update consent at the party in the role of SIS. The party in the role of SIS calls this endpoint at the party in the MP role and includes a ConsentUpdate. The party in the MP role replies with a ConsentRegistration.
      
      operationId: post-inform-consent-update
      requestBody:
        description: 'Update of consent for a school and api at the party calling this API.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentUpdate'
      responses:
        '200':
          description: 'The ConsentUpdate is processed correctly. As part of the response the new registered status of the consent is included.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentRegistration'
        '400':
          description: Bad Request
          
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentRegistration'
              example:
                status: 1
                statusMessage: 'schema incorrect'
        '401':
          description: Unauthorized - No valid token presented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentRegistration'
              example:
                status: 5
                statusMessage: 'scope required'
      security:
        - OAuth2:
            - sem.consent
  
  
  
  /consents/school/{id}:
    get:
      summary: 'Get Consents by School'
      description: 'Retrieve all consents registered for a specified school `id` .'
      x-tags:
        - Consent
      operationId: get-consents-by-school
      responses:
        '200':
          description: 'In the responses all apis are included for which a consent is registered on Producer and/or Consumer side.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Consent'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized - No valid token presented
        '404':
          description: Not Found
      security:
        - OAuth2:
            - sem.consent
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: 'schoolIdentifier (digiDeliveryId, case sensitive) of the School'
      - schema:
          type: string
        name: schemaVersion
        in: query
        required: false
        description: 'Optional parameter to request a response in a specific schema version. If none supplied, the server will choose its default schema version. See the Events API for a call to get the default schema version.'
  
  /consents/school/{id}/{api}:
    get:
      summary: 'Get Consent by School and API'
      description: 'Retrieve the most recent consent registered for a specified school `id` and `api`. Alternatively a `referenceId` can be included in the query to retrieve the status of a specific consent registration. The `referenceId` is always from the requesting party and can therefore be the producerReferenceId or consumerReferenceId.'
      x-tags:
        - Consent
      operationId: get-consent-by-school-and-api
      responses:
        '200':
          description: 'In the responses the most recent consent is included for which a consent is registered on Producer and/or Consumer side.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized - No valid token presented
        '404':
          description: Not Found
      security:
        - OAuth2:
            - sem.consent
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: 'schoolIdentifier (digiDeliveryId, case sensitive) of the School'
      - schema:
          type: string
          enum:
            - usage-api
            - progress-api
            - results-api
            - entitlement-api
            - sis-api
        name: api
        in: path
        required: true
        description: 'The API for which a party wants to retrieve the Consent status.'
      - schema:
          type: string
        name: referenceId
        in: query
        required: false
        description: 'Optional own referenceId of the Consent, from the party that calls this endpoint.'
      - schema:
          type: string
        name: schemaVersion
        in: query
        required: false
        description: 'Optional parameter to request a response in a specific schema version. If none supplied, the server will choose its default schema version. See the Events API for a call to get the default schema version.'

  x-tags:
    - Consent

openapi: 3.0.0
servers:
  - url: 'https://example.stichtingsem.org/api'
info:
  version: 1.0.0
  title: Consent API
  description: |-
    Consent-flow for third party-consent:

    __Introduction__

    When two parties agree to exchange data, they will define their roles and with this a list of scopes will be defined and saved alongside the client credentials. Also a callbackurl is registered alongside the client, where an update-message about the consent or consent-request can be sent. 

    Consent always has to be given in both systems that are involved. For example: both in the SIS and in the MP a user with the access role to allow data sharing (ie. security officer) has to give consent before the SIS can share their data with the MP (or other systems). The consent APi is used to inform the other party of an api about the consent status.

    The complete consent consists of 2 statuses: producer and consumer status. both parties will have their own identification. both parties can request the status of the api from the other partie for support purpose.

    A consent is given for an API, most of the times including the schoolid whose data is exchanged.

    Consent can be accepted, denied or revoked. This status change is send to the other party to stop sending data and show in the UI that the other partie has no longer consent and that need to be handled.

    When both parties have given consent, or re-given consent, the consumer can request the producer to handle the inital sync: send all relevant events needed to get up-to-date. For a LA that could mean sending all products, for a SIS sending all students and teachers of the current year once as event. (events can be send in batches)

    __Technical description for initial consent__

    An application (A) will ask for a token at the IDP (using the client_credentials flow) without a specific scope and can do an HTTP POST request to ask consent (#redirectToApiSpec). A referenceid is passed in the request, the referenceid of the other party is returned. The other party will create a content record for this api/client/[school] combination and set its own status at Pending. The receiving party can/should merge the records based on api/client/[school].

    This flow will be asynchronous, the application is done for now.

    __Consent resource__

    Application (A) can check the status of their consent by doing an HTTP GET request with the consent-referenceid as a queryparam. Status can be Pending, Accepted, Revoked or Declined.

    __Consent update__ 

    In the other application (B) the currently open consent-requests will be made visible to users with the access role to allow data sharing (ie. security officer). If the user accepts or declines the consent-request the status is updated and an update-message is (optionally) sent to the other party.
    The user can also revoke a prior given consent. This can be done in both application A & B. An updatemessage will than also be send to the callbackurl of the other application.

    Only when both parties consent status is in state 'Accepted' the authentication server will grand request for a token to be used in other API calls.

    __Initial Sync__
    The producing party can request an initial sync for a consent that is in 'Accepted' state. This could also be used when there are doubts that both parties have the same data processed, but should be used in exceptional situations, not as part of a standard flow.

    ## Events
    The consent APi uses no Events. 

    ## Scopes 
    The consent API uses a scopes to call consent request
    `sem.consent` - scope that allows the a party to call the consent API
        
  contact:
    name: Stichting SEM
    url: 'https://stichtingsem.org/'
    email: jorim.van.der.wijngaard@topicus.nl
tags:
  - name: consent
    description: Operations related to data access consent
  - name: consentrequest
    description: Operations to request data access (consent)
paths:
  /consentupdate:
    post:
      description: |
        Allows an application to inform the other party of the status of the consent of a (new) school (digideliveryid) and api.

        Example: the MP will update his consent to receive SIS data from the SIS on behalve of a school to the SIS
        The SIS will not give a direct answer, but wait until the school admin logs in, gets the request presented in the UI and gives consent. When the the consent in the SIS is updated, the MP is updated of the status change for consent for this api
      tags:
        - consentrequest
      operationId: request-consent-update
      requestBody:
        description: ConsentRequest for data acces to an api for a school
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentUpdate'
      responses:
        '200':
          description: |-
            OK, the request is processed 

            status - Message
            0 - All fine, consent object has all the details
            1 - API value not allowed for this party combination
            2 - ReferenceId alraedy used for different API/school combination
            x - <to be defined>

            99- Other, see statusMessage for details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  statusMessage:
                    type: string
                  consent:
                    $ref: '#/components/schemas/Consent'
      summary: Inform Consent update
      security:
        - APIKey:
            - sem.consent
    parameters: []
  '/consent/{referenceId}':
    get:
      description: Resource to check status of requested consent
      tags:
        - consentrequest
      operationId: requestConsentStatus
      responses:
        '200':
          description: 'OK, returned consentrequest can be checked for status'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      summary: Get
      security:
        - APIKey:
            - sem.consent
    parameters:
      - schema:
          type: string
        name: referenceId
        in: path
        required: true
        description: get consent information based on own referenceId
  '/consents/{schoolid}':
    get:
      description: Resource to check if a school (based on schoolid) has given consent to access data. This resource can be used to check if a school has given consent without a prior consentrequest from the application itself.
      tags:
        - consent
      operationId: getConsents
      responses:
        '200':
          description: 'OK, returned consentrequests can be checked for status'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Consent'
      summary: Get Consents by schoolid
      security:
        - APIKey:
            - sem.consent
    parameters:
      - schema:
          type: string
        name: schoolid
        in: path
        required: true
        description: id of the school to filter all consents
  '/requestsync/{api}':
    parameters:
      - schema:
          type: string
          enum:
            - catalogue-api
            - course-api
            - entitlement-api
            - usage-api
            - progress-api
            - sis-api
        in: path
        required: true
        name: api
    post:
      summary: Request initial sync
      tags: []
      responses:
        '200':
          description: |-
            OK, the request is processed 

            status - Message
            0 - All fine
            1 - Consent does not exist
            2 - Consent is not both way accepted
            x - <to be defined>

            99- Other, see statusMessage for details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  statusMessage:
                    type: string
                required:
                  - status
                  - statusMessage
      operationId: post-requestsync-referenceId
      description: |
        Request a initial sync by sending all events needed to creatine a start situation. after that the following events will keep the data in sync.

        Initial sync can only be requested for data like sis (student/teacher), catalogue (products), course (courses), but not for usage or progress (yet)
      security:
        - APIKey:
            - sem.consent
components:
  schemas:
    Consent:
      type: object
      x-tags:
        - consentrequest
      description: A model that describes the consent between 2 parties. It contains 2 id's and 2 statusses and is valid for an API (and most of the time for one school)
      title: Consent
      properties:
        producerReferenceId:
          type: string
          description: 'Id of a specific consent from the producer of the API. Example: SIS is producer of SIS-data and therefore always the producer in sis-api consent. Field will be ignored in the post request and generated by backend'
        consumerReferenceId:
          type: string
          description: 'Id of a specific consent from the consumer of the API. Example: MP, LA, and LMS are consumers of SIS-data. Party that is offering one of these roles is the consumer in the sis-api consent.'
        schoolId:
          type: string
          description: SchoolID for which the consent is requested
        api:
          type: string
          enum:
            - course-api
            - entitlement-api
            - usage-api
            - progress-api
            - sis-api
        producerStatus:
          type: string
          enum:
            - pending
            - accepted
            - declined
            - revoked
        consumerStatus:
          type: string
          enum:
            - pending
            - accepted
            - declined
            - revoked
      required:
        - producerReferenceId
        - consumerReferenceId
        - api
        - producerStatus
        - consumerStatus
    ConsentUpdate:
      type: object
      x-tags:
        - consent
      description: 'A model that describes the consent update from one party to another. Could be the first update, so the receiving party can check if it already has a consent for this API for this school from this client.'
      title: ConsentUpdate
      properties:
        referenceId:
          type: string
          description: ReferenceId from the requesting party.
        schoolId:
          type: string
          description: SchoolID for which the consent is requested
        api:
          type: string
          enum:
            - catalogue-api
            - course-api
            - entitlement-api
            - usage-api
            - progress-api
            - sis-api
        newStatus:
          type: string
          enum:
            - accepted
            - declined
            - revoked
      required:
        - referenceId
        - api
        - newStatus
  securitySchemes:
    APIKey:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: ''
          refreshUrl: ''
          scopes:
            sem.consent: ''

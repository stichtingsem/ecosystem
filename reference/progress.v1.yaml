openapi: 3.0.0
info:
  title: Progress API
  version: '1.0'
  description: |-
    This API defines progress about the specific activities (assignable Units) is the course to report to the LMS. Main goal is to inform teachers on progress (which activities are completed) and possible indication that the activity was completed, but needs attention of the teacher. 

    Progress is reported on the actities of the LA (based on the UA (assignable units) in the course description.
    Progress is reported when an activity is started or completed, not while the activity is in progress. If the activity is adaptive and will take more time for one student due to addaptive levels, that is not reported.

    Activities have a life cylcle of not-started, started, completed. The not started is the deafult and will not be reported, unless (for some reason) the status goes back to not-started. The abandoned state is to indicate that the activity was started,but will never be completed (optional)

    The API does not force the LA to use a standard for the indication about the quality of the progress. That is optional and is intended to give the LA a way to tell the teacher that the progress was not standard and the teacher is advised to have a look at the LA's dashboard (with a direct url). An LA can provide any scale (1-10, avarage, good, bad) by adding this as text. The LMS should not try to combine these indications for a complete chapter or paragraph.

    Normally this progress is send as events.

    (we still have discussion if there should be an API to retrieve the progress. we tend to say no..)

    Normally the LA can add the entitlement and course information so the LMS can use that information to efficiently process the events.

    ### Events
    SimpleProgress - send from the LA to the LMS prefereably near realtime so the LMS can show progress for teachers.

    ### Event Access

    Events|Event Data|Rationale|
    |------|---------|--|
    |la.simpleprogress| // To enable the LMS to receive progress statements after registering webhook for a specific school|

    ## Scopes and Data

    - la.progress
  contact:
    name: Stichting SEM
    url: 'https://stichtingsem.org/'
servers:
  - url: 'https://example.stichtingsem.org/api'
    description: course
paths:
  '/course/{id}/progress/simple':
    x-tags:
      - results
      - progress
    parameters:
      - in: path
        schema:
          type: string
        name: id
        required: true
      - in: query
        name: start
        description: 'Start point for pagination of results, defaults to 0,'
        schema:
          type: integer
          format: int32
        examples:
          default:
            value: 0
            summary: The start point for pagination
      - in: query
        name: limit
        description: 'Limit of number of results returned by page, defaults to 20 with max 100.'
        schema:
          type: integer
          maximum: 100
          format: int32
        examples:
          default:
            value: 20
            summary: The default value if none is provided
          max:
            value: 100
            summary: The largest recommended page size
      - in: query
        name: schoolYear
        description: School year the results were recorded in
        schema:
          type: string
        examples:
          default:
            value: 2020-2021
            summary: The default value if none is provided
    get:
      summary: 'Get XAPI statements related to a specific course, newest statements first'
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleProgress'
              examples:
                example-1: null
      operationId: get-course-statements-simple
      description: Get statements related to a specific course
  '/course/{id}/student/{studentId}/progress/simple':
    x-tags:
      - course
      - progress
    parameters:
      - in: path
        schema:
          type: string
        name: id
        description: Unique course identifier
        required: true
      - in: path
        schema:
          type: string
        name: studentId
        description: Unique student identifier
        required: true
      - in: query
        name: start
        description: 'Start point for pagination of results, defaults to 0,'
        schema:
          type: integer
          format: int32
        examples:
          default:
            value: 0
            summary: The start point for pagination
      - in: query
        name: limit
        description: 'Limit of number of results returned by page, defaults to 20 with max 100.'
        schema:
          type: integer
          maximum: 100
          format: int32
        examples:
          default:
            value: 20
            summary: The default value if none is provided
          max:
            value: 100
            summary: The largest recommended page size
      - in: query
        name: schoolYear
        description: School year the results were recorded in
        schema:
          type: string
        examples:
          default:
            value: 2020-2021
            summary: The default value if none is provided
    get:
      summary: 'Get Simple progress statements related to a specific student, newest statements first'
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleProgress'
      operationId: get-user-statements-simple
      description: Get simple progress statements for a specific user
components:
  schemas:
    SimpleProgress:
      title: SimpleProgress
      type: object
      x-examples:
        example-1:
          id: string
          schemaVersion: 0
          studentEckId: eck1
          studentId: '12345'
          assignableUnitId: '1234566'
          courseId: english-22-high
          status: completed
          timestamp: '20220112T02:55:12'
          additionalInfo: ':)'
          detailsUrl: 'https://course.publisher.com/analisys/1234566/eck1'
      properties:
        id:
          type: string
        schemaVersion:
          type: integer
          description: 'schema version of this event/object. Start with 0, inclement when we have changes, so we know how to deserialise.'
        studentEckId:
          type: string
          description: The eckid of the student for which the progress is reported.
        studentId:
          type: string
          description: The id of the student for which the progress is reported.
        assignableUnitId:
          type: string
        courseId:
          type: string
          description: Optional id of the course.
        status:
          type: string
          description: 'New status of the activity. '
          enum:
            - not-started
            - started
            - completed
            - abandoned
        timestamp:
          type: string
        additionalInfo:
          type: string
          description: |-
            Additional signal to show to teachers about this progress. This could be a signal that all is fine, or that the activity was finished, but not successfull or with so much efford that the teacher is advised that to look at the LA systems dashboards. 
            field is free format, bust should be very short. eg "good","avarage", single digit, smileys, "!" (also see detailsUrl)
          maxLength: 15
          example: ':)'
        detailsUrl:
          type: string
          description: Deeplink to the page of the LA where a teacher can get details on this progress/result.
        entitlementId:
          type: string
          description: 'optional: the entitlement when known'
      required:
        - id
        - studentEckId
        - studentId
        - status
        - timestamp
  securitySchemes:
    APIKey:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: ''
          refreshUrl: ''
          scopes:
            la.progress: Access to progress for a specific learner at a specific school
